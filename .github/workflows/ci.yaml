name: Tests

on: [push]

jobs:
  Enclave-Unit-Tests:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Install Intel's SGX SDK
        run: |
          mkdir -p "$HOME/.sgxsdk"
          cd "$HOME/.sgxsdk"
          SDK_BIN=sgx_linux_x64_sdk_2.9.101.2.bin
          wget https://download.01.org/intel-sgx/sgx-linux/2.9.1/distro/ubuntu18.04-server/"$SDK_BIN"
          chmod +x "$SDK_BIN"
          echo yes | ./"$SDK_BIN"
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache xargo sysroot
        uses: actions/cache@v1
        with:
          path: ~/.xargo
          key: ${{ runner.os }}-xargo-sysroot
      - name: Cache build artifacts
        uses: actions/cache@v1
        with:
          path: ~/.cache/sccache
          key: ${{ runner.os }}-sccache
      - run: rustup component add rust-src clippy
      - name: Install xargo
        run: |
          cargo --version
          rustc --version  
          cargo +stable install xargo --version 0.3.25
          xargo --version
      - name: Download sccache
        run: |
          wget https://github.com/mozilla/sccache/releases/download/0.2.13/sccache-0.2.13-x86_64-unknown-linux-musl.tar.gz
          tar xf ./sccache-*.tar.gz
          mv ./sccache*/sccache "$HOME/sccache"
      - name: Test enclave
        run: |
          source "$HOME/.sgxsdk/sgxsdk/environment"
          make vendor
          export SGX_MODE=SW
          RUSTC_WRAPPER="$HOME/sccache" make enclave-tests
          make clean-enclave

  Build:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: "^1.18" # The Go version to download (if necessary) and use.
      - name: Install Intel's SGX SDK
        run: |
          mkdir -p "$HOME/.sgxsdk"
          cd "$HOME/.sgxsdk"
          SDK_BIN=sgx_linux_x64_sdk_2.9.101.2.bin
          wget https://download.01.org/intel-sgx/sgx-linux/2.9.1/distro/ubuntu18.04-server/"$SDK_BIN"
          chmod +x "$SDK_BIN"
          echo yes | ./"$SDK_BIN"
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache xargo sysroot
        uses: actions/cache@v1
        with:
          path: ~/.xargo
          key: ${{ runner.os }}-xargo-sysroot
      - name: Cache build artifacts
        uses: actions/cache@v1
        with:
          path: ~/.cache/sccache
          key: ${{ runner.os }}-sccache
      - run: rustup component add rust-src clippy
      - name: Install xargo
        run: |
          cargo --version
          rustc --version  
          cargo +stable install xargo --version 0.3.25
          xargo --version
      - name: Download sccache
        run: |
          wget https://github.com/mozilla/sccache/releases/download/0.2.13/sccache-0.2.13-x86_64-unknown-linux-musl.tar.gz
          tar xf ./sccache-*.tar.gz
          mv ./sccache*/sccache "$HOME/sccache"
      - name: Create fake api keys
        run: |
          mkdir -p ias_keys/sw_dummy
          mkdir -p ias_keys/develop
          echo "not_a_key" > ias_keys/sw_dummy/spid.txt
          echo "not_a_key" > ias_keys/develop/spid.txt
          echo "not_a_key" > ias_keys/sw_dummy/api_key.txt
          echo "not_a_key" > ias_keys/develop/api_key.txt
      - name: Install Requirements
        run: |
          rustup target add wasm32-unknown-unknown
          go install github.com/jteeuwen/go-bindata/go-bindata@latest
          go-bindata -version # check installation
          chmod +x ./scripts/install-wasm-tools.sh
          ./scripts/install-wasm-tools.sh
      - name: Build Executable
        run: |
          source "$HOME/.sgxsdk/sgxsdk/environment"
          make vendor
          SGX_MODE=SW BUILD_PROFILE="minimal" RUSTC_WRAPPER="$HOME/sccache" make build-linux
      - name: Build Contracts
        run: |
          make build-test-contract
          cp x/compute/internal/keeper/testdata/erc20.wasm .
      - uses: actions/upload-artifact@v2
        with:
          name: erc20.wasm
          path: erc20.wasm
      - uses: actions/upload-artifact@v2
        with:
          name: secretd
          path: secretd
      - uses: actions/upload-artifact@v2
        with:
          name: contract.wasm
          path: ./x/compute/internal/keeper/testdata/test-contract/contract.wasm
      - uses: actions/upload-artifact@v2
        with:
          name: enclave
          path: ./go-cosmwasm/librust_cosmwasm_enclave.signed.so
      - uses: actions/upload-artifact@v2
        with:
          name: libgo_cosmwasm
          path: ./go-cosmwasm/api/libgo_cosmwasm.so
      - uses: actions/upload-artifact@v2
        with:
          name: contract_with_floats.wasm
          path: ./x/compute/internal/keeper/testdata/test-contract/contract_with_floats.wasm
      - uses: actions/upload-artifact@v2
        with:
          name: too-high-initial-memory.wasm
          path: ./x/compute/internal/keeper/testdata/test-contract/too-high-initial-memory.wasm
      - uses: actions/upload-artifact@v2
        with:
          name: static-too-high-initial-memory.wasm
          path: ./x/compute/internal/keeper/testdata/test-contract/static-too-high-initial-memory.wasm

  Go-Tests:
    runs-on: ubuntu-20.04
    needs: Build
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: "^1.18" # The Go version to download (if necessary) and use.
      - name: Install Intel's SGX SDK
        run: |
          mkdir -p "$HOME/.sgxsdk"
          cd "$HOME/.sgxsdk"
          SDK_BIN=sgx_linux_x64_sdk_2.9.101.2.bin
          wget https://download.01.org/intel-sgx/sgx-linux/2.9.1/distro/ubuntu18.04-server/"$SDK_BIN"
          chmod +x "$SDK_BIN"
          echo yes | ./"$SDK_BIN"
      - uses: actions/download-artifact@v2
        with:
          name: libgo_cosmwasm
      - uses: actions/download-artifact@v2
        with:
          name: enclave
      - uses: actions/download-artifact@v2
        with:
          name: contract.wasm
      - uses: actions/download-artifact@v2
        with:
          name: contract_with_floats.wasm
      - uses: actions/download-artifact@v2
        with:
          name: too-high-initial-memory.wasm
      - uses: actions/download-artifact@v2
        with:
          name: static-too-high-initial-memory.wasm
      - name: Setup Files
        run: |
          cp libgo_cosmwasm.so ./go-cosmwasm/api/libgo_cosmwasm.so
          cp librust_cosmwasm_enclave.signed.so ./go-cosmwasm/librust_cosmwasm_enclave.signed.so
          cp contract.wasm ./x/compute/internal/keeper/testdata/test-contract/contract.wasm
          cp too-high-initial-memory.wasm ./x/compute/internal/keeper/testdata/test-contract/too-high-initial-memory.wasm
          cp contract_with_floats.wasm ./x/compute/internal/keeper/testdata/test-contract/contract_with_floats.wasm
          cp static-too-high-initial-memory.wasm ./x/compute/internal/keeper/testdata/test-contract/static-too-high-initial-memory.wasm
      - name: Test x/registration
        run: |
          source "$HOME/.sgxsdk/sgxsdk/environment"
          go test -v ./x/registration/internal/...
      - name: Test x/compute
        run: |
          source "$HOME/.sgxsdk/sgxsdk/environment"
          export SGX_MODE=SW
          cp librust_cosmwasm_enclave.signed.so ./x/compute/internal/keeper
          mkdir -p ias_keys/develop
          mkdir -p /opt/secret/.sgx_secrets/
          echo "not_a_key" > ias_keys/develop/spid.txt
          echo "not_a_key" > ias_keys/develop/api_key.txt
          LOG_LEVEL=ERROR go test -v ./x/compute/client/...
          LOG_LEVEL=ERROR go test -p 1 -timeout 20m -v ./x/compute/internal/...

  Clippy:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Install Intel's SGX SDK
        run: |
          mkdir -p "$HOME/.sgxsdk"
          cd "$HOME/.sgxsdk"
          SDK_BIN=sgx_linux_x64_sdk_2.9.101.2.bin
          wget https://download.01.org/intel-sgx/sgx-linux/2.9.1/distro/ubuntu18.04-server/"$SDK_BIN"
          chmod +x "$SDK_BIN"
          echo yes | ./"$SDK_BIN"
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache xargo sysroot
        uses: actions/cache@v1
        with:
          path: ~/.xargo
          key: ${{ runner.os }}-xargo-sysroot
      - name: Cache build artifacts
        uses: actions/cache@v1
        with:
          path: ~/.cache/sccache
          key: ${{ runner.os }}-sccache
      - run: rustup component add rust-src clippy
      - name: Install xargo
        run: |
          cargo --version
          rustc --version  
          cargo +stable install xargo --version 0.3.25
          xargo --version
      - name: Download sccache
        run: |
          wget https://github.com/mozilla/sccache/releases/download/0.2.13/sccache-0.2.13-x86_64-unknown-linux-musl.tar.gz
          tar xf ./sccache-*.tar.gz
          mv ./sccache*/sccache "$HOME/sccache"
      - name: Clippy
        run: |
          source "$HOME/.sgxsdk/sgxsdk/environment"
          make vendor
          cd cosmwasm/enclaves/execute/
          SGX_MODE=SW make clippy
          SGX_MODE=HW make clippy

  MacOS-ARM64-CLI:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: "^1.18" # The Go version to download (if necessary) and use.
      - name: Install xgo
        run: |
          go install github.com/crazy-max/xgo@v0.17.0
          xgo || true # check installation
      - name: Build MacOS CLI
        run: make build_macos_arm64_cli

  Integration-Tests:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Build docker testnet
        run: |
          echo not_a_key | tee {api_key,spid}.txt
          DOCKER_TAG=v0.0.0 make build-localsecret
      - name: Run secret.js tests
        run: |
          git clone --depth 1 --branch lior-fix-based-on-rpc-2 https://github.com/scrtlabs/secret.js
          cd secret.js
          # Use the docker images that we built just a few steps above
          perl -i -pe 's/localsecret:.+?"/localsecret:v0.0.0"/' ./test/*
          yarn
          yarn test
