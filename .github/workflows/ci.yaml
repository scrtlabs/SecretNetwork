name: Tests

on: [push]


jobs:
  Enclave-Unit-Tests:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Install Intel's SGX SDK
        run: |
          mkdir -p "$HOME/.sgxsdk"
          cd "$HOME/.sgxsdk"
          SDK_BIN=sgx_linux_x64_sdk_2.9.101.2.bin
          wget https://download.01.org/intel-sgx/sgx-linux/2.9.1/distro/ubuntu18.04-server/"$SDK_BIN"
          chmod +x "$SDK_BIN"
          echo yes | ./"$SDK_BIN"
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache xargo sysroot
        uses: actions/cache@v1
        with:
          path: ~/.xargo
          key: ${{ runner.os }}-xargo-sysroot
      - name: Cache build artifacts
        uses: actions/cache@v1
        with:
          path: ~/.cache/sccache
          key: ${{ runner.os }}-sccache
      - run: |
          rustup component add rust-src clippy
          cd cosmwasm/enclaves/execute/
          rustup component add rust-src clippy
      - name: Install xargo
        run: |
          cargo --version
          rustc --version  
          cargo +stable install xargo --version 0.3.25
          xargo --version
      - name: Download sccache
        run: |
          wget https://github.com/mozilla/sccache/releases/download/0.2.13/sccache-0.2.13-x86_64-unknown-linux-musl.tar.gz
          tar xf ./sccache-*.tar.gz
          mv ./sccache*/sccache "$HOME/sccache"
      - name: Test enclave
        run: |
          source "$HOME/.sgxsdk/sgxsdk/environment"
          make vendor
          export SGX_MODE=SW
          RUSTC_WRAPPER="$HOME/sccache" make enclave-tests
          make clean-enclave

  Build-Contracts:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
#      - uses: actions/setup-go@v2
#        with:
#          go-version: 1.19 # The Go version to download (if necessary) and use.
#      - name: Install Intel's SGX SDK
#        run: |
#          mkdir -p "$HOME/.sgxsdk"
#          cd "$HOME/.sgxsdk"
#          SDK_BIN=sgx_linux_x64_sdk_2.9.101.2.bin
#          wget https://download.01.org/intel-sgx/sgx-linux/2.9.1/distro/ubuntu18.04-server/"$SDK_BIN"
#          chmod +x "$SDK_BIN"
#          echo yes | ./"$SDK_BIN"
#      - name: Cache cargo registry
#        uses: actions/cache@v1
#        with:
#          path: ~/.cargo/registry
#          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
#      - name: Cache xargo sysroot
#        uses: actions/cache@v1
#        with:
#          path: ~/.xargo
#          key: ${{ runner.os }}-xargo-sysroot
#      - name: Cache build artifacts
#        uses: actions/cache@v1
#        with:
#          path: ~/.cache/sccache
#          key: ${{ runner.os }}-sccache
#      - run: |
#          rustup component add rust-src clippy
#          cd cosmwasm/enclaves/execute/
#          rustup component add rust-src clippy
#      - name: Install xargo
#        run: |
#          cargo --version
#          rustc --version
#          cargo +stable install xargo --version 0.3.25
#          xargo --version
      - name: Download sccache
        run: |
          wget https://github.com/mozilla/sccache/releases/download/0.2.13/sccache-0.2.13-x86_64-unknown-linux-musl.tar.gz
          tar xf ./sccache-*.tar.gz
          mv ./sccache*/sccache "$HOME/sccache"
#      - name: Create fake api keys
#        run: |
#          mkdir -p ias_keys/sw_dummy
#          mkdir -p ias_keys/develop
#          echo "not_a_key" > ias_keys/sw_dummy/spid.txt
#          echo "not_a_key" > ias_keys/develop/spid.txt
#          echo "not_a_key" > ias_keys/sw_dummy/api_key.txt
#          echo "not_a_key" > ias_keys/develop/api_key.txt
      - name: Install Requirements
        run: |
          rustup target add wasm32-unknown-unknown
          chmod +x ./scripts/install-wasm-tools.sh
          ./scripts/install-wasm-tools.sh
#      - name: Build Executable
#        run: |
#          source "$HOME/.sgxsdk/sgxsdk/environment"
#          make vendor
#          SGX_MODE=SW BUILD_PROFILE="minimal" RUSTC_WRAPPER="$HOME/sccache" make build-linux
      - name: Build Contracts
        run: |
          make build-test-contract
          cp x/compute/internal/keeper/testdata/erc20.wasm .
      - uses: actions/upload-artifact@v2
        with:
          name: erc20.wasm
          path: erc20.wasm
#      - uses: actions/upload-artifact@v2
#        with:
#          name: secretd
#          path: secretd
      - uses: actions/upload-artifact@v2
        with:
          name: contract.wasm
          path: ./x/compute/internal/keeper/testdata/test-contract/contract.wasm
      - uses: actions/upload-artifact@v2
        with:
          name: v1-contract.wasm
          path: ./x/compute/internal/keeper/testdata/v1-sanity-contract/v1-contract.wasm
      - uses: actions/upload-artifact@v2
        with:
          name: ibc.wasm
          path: ./x/compute/internal/keeper/testdata/ibc/ibc.wasm
#      - uses: actions/upload-artifact@v2
#        with:
#          name: enclave
#          path: ./go-cosmwasm/librust_cosmwasm_enclave.signed.so
#      - uses: actions/upload-artifact@v2
#        with:
#          name: libgo_cosmwasm
#          path: ./go-cosmwasm/api/libgo_cosmwasm.so
      - uses: actions/upload-artifact@v2
        with:
          name: contract_with_floats.wasm
          path: ./x/compute/internal/keeper/testdata/test-contract/contract_with_floats.wasm
      - uses: actions/upload-artifact@v2
        with:
          name: too-high-initial-memory.wasm
          path: ./x/compute/internal/keeper/testdata/test-contract/too-high-initial-memory.wasm
      - uses: actions/upload-artifact@v2
        with:
          name: static-too-high-initial-memory.wasm
          path: ./x/compute/internal/keeper/testdata/test-contract/static-too-high-initial-memory.wasm

  Go-Tests:
    runs-on: ubuntu-20.04
    needs: [Build-Contracts, Build-LocalSecret]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: 1.19 # The Go version to download (if necessary) and use.
      - name: Install Intel's SGX SDK
        run: |
          mkdir -p "$HOME/.sgxsdk"
          cd "$HOME/.sgxsdk"
          SDK_BIN=sgx_linux_x64_sdk_2.9.101.2.bin
          wget https://download.01.org/intel-sgx/sgx-linux/2.9.1/distro/ubuntu18.04-server/"$SDK_BIN"
          chmod +x "$SDK_BIN"
          echo yes | ./"$SDK_BIN"
      - name: Download LocalSecret
        uses: actions/download-artifact@v3
        with:
          name: localsecret
          path: /tmp
      - name: Load images
        run: |
          docker load --input /tmp/localsecret.tar
          docker run -v $PWD:/opt/mount --rm --entrypoint cp ghcr.io/scrtlabs/localsecret:v0.0.0 /usr/bin/secretd /opt/mount/secretd
          docker run -v $PWD:/opt/mount --rm --entrypoint cp ghcr.io/scrtlabs/localsecret:v0.0.0 /usr/lib/libgo_cosmwasm.so /opt/mount/libgo_cosmwasm.so
          docker run -v $PWD:/opt/mount --rm --entrypoint cp ghcr.io/scrtlabs/localsecret:v0.0.0 /usr/lib/librust_cosmwasm_enclave.signed.so /opt/mount/librust_cosmwasm_enclave.signed.so
      

      - uses: actions/download-artifact@v3
        with:
          name: libgo_cosmwasm
      - uses: actions/download-artifact@v3
        with:
          name: enclave
      - uses: actions/download-artifact@v3
        with:
          name: contract.wasm
      - uses: actions/download-artifact@v3
        with:
          name: v1-contract.wasm
          path: ./x/compute/internal/keeper/testdata/v1-sanity-contract
      - uses: actions/download-artifact@v3
        with:
          name: ibc.wasm
          path: ./x/compute/internal/keeper/testdata/ibc
      - uses: actions/download-artifact@v2
        with:
          name: contract_with_floats.wasm
      - uses: actions/download-artifact@v2
        with:
          name: too-high-initial-memory.wasm
      - uses: actions/download-artifact@v2
        with:
          name: static-too-high-initial-memory.wasm
      - name: Setup Files
        run: |
          find "$(pwd)" -name \*.wasm
          cp /opt/mount/secretd /usr/bin/secretd
          cp /opt/mount/libgo_cosmwasm.so ./go-cosmwasm/api/libgo_cosmwasm.so
          cp /opt/mount/librust_cosmwasm_enclave.signed.so ./go-cosmwasm/librust_cosmwasm_enclave.signed.so
          cp contract.wasm ./x/compute/internal/keeper/testdata/test-contract/contract.wasm
          cp too-high-initial-memory.wasm ./x/compute/internal/keeper/testdata/test-contract/too-high-initial-memory.wasm
          cp contract_with_floats.wasm ./x/compute/internal/keeper/testdata/test-contract/contract_with_floats.wasm
          cp static-too-high-initial-memory.wasm ./x/compute/internal/keeper/testdata/test-contract/static-too-high-initial-memory.wasm
          find "$(pwd)" -name \*.wasm
      - name: Test x/registration
        run: |
          source "$HOME/.sgxsdk/sgxsdk/environment"
          go test -v ./x/registration/internal/...
      - name: Test x/compute
        run: |
          source "$HOME/.sgxsdk/sgxsdk/environment"
          export SGX_MODE=SW
          cp librust_cosmwasm_enclave.signed.so ./x/compute/internal/keeper
          mkdir -p ias_keys/develop
          mkdir -p /opt/secret/.sgx_secrets/
          echo "not_a_key" > ias_keys/develop/spid.txt
          echo "not_a_key" > ias_keys/develop/api_key.txt
          LOG_LEVEL=ERROR go test -v ./x/compute/client/...
          LOG_LEVEL=ERROR go test -p 1 -timeout 90m -v ./x/compute/internal/...

  Clippy:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Install Intel's SGX SDK
        run: |
          mkdir -p "$HOME/.sgxsdk"
          cd "$HOME/.sgxsdk"
          SDK_BIN=sgx_linux_x64_sdk_2.9.101.2.bin
          wget https://download.01.org/intel-sgx/sgx-linux/2.9.1/distro/ubuntu18.04-server/"$SDK_BIN"
          chmod +x "$SDK_BIN"
          echo yes | ./"$SDK_BIN"
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache xargo sysroot
        uses: actions/cache@v1
        with:
          path: ~/.xargo
          key: ${{ runner.os }}-xargo-sysroot
      - name: Cache build artifacts
        uses: actions/cache@v1
        with:
          path: ~/.cache/sccache
          key: ${{ runner.os }}-sccache
      - run: |
          rustup component add rust-src clippy
          cd cosmwasm/enclaves/execute/
          rustup component add rust-src clippy
      - name: Install xargo
        run: |
          cd cosmwasm/enclaves/execute/
          cargo --version
          rustc --version  
          cargo +stable install xargo --version 0.3.25
          xargo --version
      - name: Download sccache
        run: |
          wget https://github.com/mozilla/sccache/releases/download/0.2.13/sccache-0.2.13-x86_64-unknown-linux-musl.tar.gz
          tar xf ./sccache-*.tar.gz
          mv ./sccache*/sccache "$HOME/sccache"
      - name: Clippy
        run: |
          source "$HOME/.sgxsdk/sgxsdk/environment"
          make vendor
          cd cosmwasm/enclaves/execute/
          SGX_MODE=SW make clippy
          SGX_MODE=HW make clippy

  MacOS-ARM64-CLI:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: 1.19 # The Go version to download (if necessary) and use.
      - name: Install xgo
        run: |
          go install github.com/crazy-max/xgo@v0.17.0
          xgo || true # check installation
      - name: Build MacOS CLI
        run: make build_macos_arm64_cli

  Build-LocalSecret:
    runs-on: ubuntu-20.04
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: network=host
      - uses: actions/checkout@v2
      - name: Build LocalSecret Base
        uses: docker/build-push-action@v3
        with:
          file: deployment/dockerfiles/base.Dockerfile
          context: .
          build-args: |
            FEATURES=debug-print
            SGX_MODE=SW
          push: true
          tags: localhost:5000/scrt-enclave-secretd:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Build LocalSecret Release
        uses: docker/build-push-action@v3
        with:
          file: deployment/dockerfiles/release.Dockerfile
          context: .
          push: true
          tags: localhost:5000/release:latest
          build-args: |
            SECRET_NODE_TYPE=bootstrap
            CHAIN_ID=secretdev-1
            SCRT_BIN_IMAGE=localhost:5000/scrt-enclave-secretd:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Build LocalSecret Final Dev Image
        uses: docker/build-push-action@v3
        with:
          file: deployment/dockerfiles/dev-image.Dockerfile
          context: .
          load: true
          tags: ghcr.io/scrtlabs/localsecret:v0.0.0
          build-args: |
            SCRT_BASE_IMAGE=localhost:5000/release:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/localsecret.tar
      - name: Upload Image
        uses: actions/upload-artifact@v3
        with:
          name: localsecret
          path: /tmp/localsecret.tar

  Build-Hermes:
    runs-on: ubuntu-20.04
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - uses: actions/checkout@v2
      - name: Setup Fake API keys
        run: |
          echo not_a_key | tee {api_key,spid}.txt
      - name: Build LocalSecret Final Dev Image
        uses: docker/build-push-action@v3
        with:
          file: deployment/dockerfiles/ibc/hermes.Dockerfile
          context: deployment/dockerfiles/ibc
          load: true
          tags: hermes:v0.0.0
          build-args: |
            SECRET_NODE_TYPE=bootstrap
            CHAIN_ID=secretdev-1
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/hermes.tar
      - name: Upload Image
        uses: actions/upload-artifact@v3
        with:
          name: hermes
          path: /tmp/hermes.tar

  Integration-Tests:
    runs-on: ubuntu-20.04
    needs: [Build-LocalSecret, Build-Hermes]
    steps:
      - uses: actions/checkout@v2
      - name: Download Hermes
        uses: actions/download-artifact@v3
        with:
          name: hermes
          path: /tmp
      - name: Download LocalSecret
        uses: actions/download-artifact@v3
        with:
          name: localsecret
          path: /tmp
      - name: Load images
        run: |
          docker load --input /tmp/localsecret.tar
          docker load --input /tmp/hermes.tar
      - name: Setup Fake API keys
        run: |
          echo not_a_key | tee {api_key,spid}.txt
      - name: Run integration tests
        run: |
          cd integration-tests
          yarn
          docker compose -f ../deployment/dockerfiles/ibc/docker-compose.yml up -d
          # docker compose -f ../deployment/dockerfiles/ibc/docker-compose.yml logs -f &
          yarn test
          make kill-localsecret # next step needs the localsecret ports
      - name: Run secret.js tests
        run: |
          git clone --depth 1 --branch cosmwasm-v1 https://github.com/scrtlabs/secret.js
          cd secret.js
          # Use the docker images that we built just a few steps above
          perl -i -pe 's/localsecret:.+?"/localsecret:v0.0.0"/' ./test/*
          yarn
          yarn test
