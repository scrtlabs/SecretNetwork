name: Release

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+" # Push events to matching v*, i.e. v1.0, v20.15.10
      - "v[0-9]+.[0-9]+.[0-9]+-alpha.[0-9]+" # Push events to matching alpha releases
      - "v[0-9]+.[0-9]+.[0-9]+-beta.[0-9]+" # Push events to matching beta releases
      - "v[0-9]+.[0-9]+.[0-9]+-patch.[0-9]+" # Push events to matching beta releases

jobs:
  build-deb-testnet:
    strategy:
      fail-fast: false
      matrix:
        db_backend: [rocksdb, goleveldb]
    runs-on: ubuntu-20.04
    env: # Or as an environment variable
      SPID_TESTNET: ${{ secrets.SPID_TESTNET }}
      API_KEY_TESTNET: ${{ secrets.API_KEY_TESTNET }}
    steps:
      - uses: actions/checkout@v3
      - name: Declare Commit Variables
        id: vars
        shell: bash
        run: |
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
      - uses: actions/setup-go@v3
        with:
          go-version: 1.19 # The Go version to download (if necessary) and use.
      - name: Install Intel's SGX SDK
        run: |
          mkdir -p "$HOME/.sgxsdk"
          cd "$HOME/.sgxsdk"
          SDK_BIN=sgx_linux_x64_sdk_2.9.101.2.bin
          wget https://download.01.org/intel-sgx/sgx-linux/2.9.1/distro/ubuntu18.04-server/"$SDK_BIN"
          chmod +x "$SDK_BIN"
          echo yes | ./"$SDK_BIN"
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache xargo sysroot
        uses: actions/cache@v3
        with:
          path: ~/.xargo
          key: ${{ runner.os }}-xargo-sysroot
      - name: Cache build artifacts
        uses: actions/cache@v3
        with:
          path: ~/.cache/sccache
          key: ${{ runner.os }}-sccache
      - run: rustup component add rust-src clippy
      - name: Install xargo
        run: |
          cargo +stable install xargo --version 0.3.25
          xargo --version
      - name: Download sccache
        run: |
          wget https://github.com/mozilla/sccache/releases/download/0.2.13/sccache-0.2.13-x86_64-unknown-linux-musl.tar.gz
          tar xf ./sccache-*.tar.gz
          mv ./sccache*/sccache "$HOME/sccache"
      - name: Create api keys
        run: |
          echo $SPID_TESTNET > spid.txt
          echo $API_KEY_TESTNET > api_key.txt
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\/v/}
      - name: Build testnet
        run: |
          source "$HOME/.sgxsdk/sgxsdk/environment"
          VERSION=${{ steps.get_version.outputs.VERSION }} DB_BACKEND=${{ matrix.db_backend }} make build-testnet
          cp build/secretnetwork_${{ steps.get_version.outputs.VERSION }}_amd64.deb secretnetwork_${{ steps.get_version.outputs.VERSION }}_testnet_${{ matrix.db_backend }}_amd64.deb
      - uses: actions/upload-artifact@v3
        with:
          name: secretnetwork_${{ steps.get_version.outputs.VERSION }}_testnet_${{ matrix.db_backend }}_amd64.deb
          path: secretnetwork_${{ steps.get_version.outputs.VERSION }}_testnet_${{ matrix.db_backend }}_amd64.deb

  build-deb-mainnet:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        db_backend: [goleveldb, rocksdb]
    env: # Or as an environment variable
      SPID_MAINNET: ${{ secrets.SPID_MAINNET }}
      API_KEY_MAINNET: ${{ secrets.API_KEY_MAINNET }}
      REGISTRY: ghcr.io
      IMAGE_NAME: scrtlabs/secret-network-node
    steps:
      - uses: actions/checkout@v3
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\/v/}
      - uses: actions/setup-go@v3
        with:
          go-version: 1.19 # The Go version to download (if necessary) and use.
      - name: Create api keys
        run: |
          echo $SPID_MAINNET > spid.txt
          echo $API_KEY_MAINNET > api_key.txt
      - name: Build
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }} DB_BACKEND=${{ matrix.db_backend }} FEATURES=production FEATURES_U=production, make build-mainnet-upgrade
          cp build/secretnetwork_${{ steps.get_version.outputs.VERSION }}_amd64.deb secretnetwork_${{ steps.get_version.outputs.VERSION }}_mainnet_${{ matrix.db_backend }}_amd64.deb
      - uses: actions/upload-artifact@v3
        with:
          name: secretnetwork_${{ steps.get_version.outputs.VERSION }}_mainnet_${{ matrix.db_backend }}_amd64.deb
          path: secretnetwork_${{ steps.get_version.outputs.VERSION }}_mainnet_${{ matrix.db_backend }}_amd64.deb
      - name: Log in to the Container registry
        if: ${{ matrix.db_backend == 'goleveldb' }}
        uses: docker/login-action@49ed152c8eca782a232dede0303416e8f356c37b
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push docker image
        if: ${{ matrix.db_backend == 'goleveldb' }}
        run: docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.get_version.outputs.VERSION }}

  native-build-cli:
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [ubuntu-20.04, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v2
        with:
          go-version: 1.19 # The Go version to download (if necessary) and use.
      - name: Build CLI
        shell: bash
        run: |
          make build_cli
          cp "secretcli" "secretcli-$RUNNER_OS"
      - uses: actions/upload-artifact@v3
        with:
          name: secretcli-${{runner.os}}
          path: secretcli-${{runner.os}}

  MacOS-ARM64-CLI:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: 1.19 # The Go version to download (if necessary) and use.
      - name: Install xgo
        run: |
          go install github.com/crazy-max/xgo@v0.17.0
          xgo || true # check installation
      - name: Build MacOS CLI
        shell: bash
        run: |
          make build_macos_arm64_cli
          cp "secretcli-macos-arm64" "secretcli-MacOS-arm64"
      - uses: actions/upload-artifact@v3
        with:
          name: secretcli-MacOS-arm64
          path: secretcli-MacOS-arm64

  publish-localsecret:
    runs-on: ubuntu-20.04
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: scrtlabs/localsecret
    steps:
      - uses: actions/checkout@v3
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      - name: Log in to the Container registry
        uses: docker/login-action@49ed152c8eca782a232dede0303416e8f356c37b
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Create temp files
        shell: bash
        run: |
          echo "random data" > api_key.txt
          echo "lol this is ignored" > spid.txt
      - name: Build dev docker image
        shell: bash
        run: |
          DOCKER_TAG=${{ steps.get_version.outputs.VERSION }} make build-localsecret
      - name: Push docker image
        run: docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.get_version.outputs.VERSION }}

  Release:
    needs:
      [native-build-cli, build-deb-testnet, build-deb-mainnet, MacOS-ARM64-CLI]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\/v/}
      - uses: actions/download-artifact@v3
        with:
          name: secretcli-Linux
      - uses: actions/download-artifact@v3
        with:
          name: secretcli-macOS
      - uses: actions/download-artifact@v3
        with:
          name: secretcli-Windows
      - uses: actions/download-artifact@v3
        with:
          name: secretcli-MacOS-arm64
      - uses: actions/download-artifact@v3
        with:
          name: secretnetwork_${{ steps.get_version.outputs.VERSION }}_mainnet_goleveldb_amd64.deb
      - uses: actions/download-artifact@v3
        with:
          name: secretnetwork_${{ steps.get_version.outputs.VERSION }}_mainnet_rocksdb_amd64.deb
      - uses: actions/download-artifact@v3
        with:
          name: secretnetwork_${{ steps.get_version.outputs.VERSION }}_testnet_goleveldb_amd64.deb
      - uses: actions/download-artifact@v3
        with:
          name: secretnetwork_${{ steps.get_version.outputs.VERSION }}_testnet_rocksdb_amd64.deb
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          prerelease: true
          files: |
            secretnetwork_${{ steps.get_version.outputs.VERSION }}_mainnet_goleveldb_amd64.deb
            secretnetwork_${{ steps.get_version.outputs.VERSION }}_mainnet_rocksdb_amd64.deb
            secretnetwork_${{ steps.get_version.outputs.VERSION }}_testnet_goleveldb_amd64.deb
            secretnetwork_${{ steps.get_version.outputs.VERSION }}_testnet_rocksdb_amd64.deb
            secretcli-macOS
            secretcli-Windows
            secretcli-Linux
            secretcli-MacOS-arm64
