trigger:
  branches:
    include:
      - "*" # must quote since "*" is a YAML reserved character; we want a string
  paths:
    exclude:
      - "*.md"
      - "*.png"
      - "docs/*"
      - ".gitignore"
      - "LICENSE"

pool:
  name: "sgx scale set"

workspace:
  clean: all # what to clean up before the job runs

steps:
  - task: Cache@2
    displayName: Cache task
    inputs:
      key: 'docker | "$(Agent.OS)" | cache'
      path: $(Pipeline.Workspace)/docker
      cacheHitVar: CACHE_RESTORED                #Variable to set to 'true' when the cache is restored
    
  - script: |
      docker load -i $(Pipeline.Workspace)/docker/cache.tar
    displayName: Docker restore
    condition: and(not(canceled()), eq(variables.CACHE_RESTORED, 'true'))
    
  - script: echo $(spid) > spid.txt; echo $(api-key-dev) > api_key.txt
    displayName: "Save api keys"
  - task: Docker@2
    displayName: "Build enclave tests"
    inputs:
      command: build
      repository: rust-enclave-test
      tags: latest
      buildContext: .
      arguments: --build-arg SGX_MODE=HW
      Dockerfile: deployment/dockerfiles/enclave-test.Dockerfile
  - task: Docker@2
    displayName: "Compile and build"
    inputs:
      command: build
      repository: rust-go-base-image
      tags: latest
      buildContext: .
      arguments: --build-arg SGX_MODE=HW
      Dockerfile: deployment/dockerfiles/base.Dockerfile
  - task: Docker@2
    displayName: "Build release container"
    inputs:
      command: build
      repository: build-release
      tags: latest
      buildContext: .
      arguments: --build-arg SGX_MODE=HW
      Dockerfile: deployment/dockerfiles/release.Dockerfile
  - task: Docker@2
    displayName: "Build tests image"
    inputs:
      command: build
      repository: tests-base-image
      tags: latest
      buildContext: .
      arguments: --build-arg SGX_MODE=HW
      Dockerfile: deployment/dockerfiles/go-tests.Dockerfile
  - task: Docker@2
    displayName: "Build node from release"
    inputs:
      command: build
      repository: ci-enigma-sgx-node
      tags: latest
      buildContext: .
      arguments: --build-arg SECRET_LOCAL_NODE_TYPE=NODE --build-arg SGX_MODE=HW
      Dockerfile: deployment/dockerfiles/local-node.Dockerfile
  - task: Docker@2
    displayName: "Build bootstrap from release"
    inputs:
      command: build
      buildContext: .
      repository: ci-enigma-sgx-bootstrap
      tags: latest
      arguments: --build-arg SECRET_LOCAL_NODE_TYPE=BOOTSTRAP --build-arg SGX_MODE=HW
      Dockerfile: deployment/dockerfiles/local-node.Dockerfile

  - script: |
      mkdir -p $(Pipeline.Workspace)/docker
      docker save -o $(Pipeline.Workspace)/docker/cache.tar $(repository):$(tag)
    displayName: Docker save
    condition: and(not(canceled()), or(failed(), ne(variables.CACHE_RESTORED, 'true')))

  - script: export DOCKER_CLIENT_TIMEOUT=120 && export COMPOSE_HTTP_TIMEOUT=120 && docker-compose --compatibility -f deployment/ci/docker-compose.ci.yaml up --exit-code-from base aesm base
    displayName: "Run system tests (go tests)"

  - script: export DOCKER_CLIENT_TIMEOUT=120 && export COMPOSE_HTTP_TIMEOUT=120 && docker-compose --compatibility -f deployment/ci/docker-compose.ci.yaml up --exit-code-from bench aesm bench
    displayName: "Run benchmarks"

  - script: docker-compose -f deployment/ci/docker-compose.ci.yaml --compatibility up --exit-code-from node aesm bootstrap node
    displayName: "Run integration tests"

  - script: docker-compose -f deployment/ci/docker-compose.ci.yaml --compatibility up --exit-code-from enclave-test aesm enclave-test
    displayName: "Run enclave tests"

  - script: docker-compose -f deployment/ci/docker-compose.ci.yaml --compatibility down
    condition: always()
    displayName: "Shutdown"
