syntax = "proto3";

package secret.intertx.v1beta1;

import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "google/api/annotations.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";

option go_package = "github.com/scrtlabs/SecretNetwork/x/mauth/types";
option (gogoproto.goproto_getters_all) = false;
option (gogoproto.equal_all) = true;

// Msg defines the ica-authentication Msg service.
service Msg {
  // Register defines a rpc handler for MsgRegisterAccount
  rpc RegisterAccount(MsgRegisterAccount) returns (MsgRegisterAccountResponse) {
    option (google.api.http).post = "/mauth/v1beta1/register-account";
  };
  rpc SubmitTx(MsgSubmitTx) returns (MsgSubmitTxResponse) {
    option (google.api.http).post = "/mauth/v1beta1/submit-tx";
  };
}

// MsgRegisterAccount registers an interchain account for the given owner over the specified connection pair
message MsgRegisterAccount {

  string owner                      = 1;
  string connection_id              = 2 [(gogoproto.moretags) = "yaml:\"connection_id\""];
}

// MsgRegisterAccountResponse is the response type for Msg/RegisterAccount
message MsgRegisterAccountResponse {}

// MsgSubmitTx creates and submits an arbitrary transaction msg to be executed using an interchain account
message MsgSubmitTx {

  bytes owner                       = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
  string connection_id              = 2 [(gogoproto.moretags) = "yaml:\"connection_id\""];
  google.protobuf.Any msg           = 4;
}

// MsgSubmitTxResponse defines the MsgSubmitTx response type
message MsgSubmitTxResponse {}