syntax = "proto3";
package secret.compute.v1beta1;

option go_package = "github.com/scrtlabs/SecretNetwork/x/compute/internal/types";

import "gogoproto/gogo.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";
import "amino/amino.proto";
import "secret/compute/v1beta1/params.proto";

// Msg defines the wasm Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;
  // StoreCode to submit Wasm code to the system
  rpc StoreCode(MsgStoreCode) returns (MsgStoreCodeResponse);
  //  Instantiate creates a new smart contract instance for the given code id.
  rpc InstantiateContract(MsgInstantiateContract)
      returns (MsgInstantiateContractResponse);
  // Execute submits the given message data to a smart contract
  rpc ExecuteContract(MsgExecuteContract) returns (MsgExecuteContractResponse);
  // Migrate runs a code upgrade/ downgrade for a smart contract
  rpc MigrateContract(MsgMigrateContract) returns (MsgMigrateContractResponse);
  // UpdateAdmin sets a new   admin for a smart contract
  rpc UpdateAdmin(MsgUpdateAdmin) returns (MsgUpdateAdminResponse);
  // ClearAdmin removes any admin stored for a smart contract
  rpc ClearAdmin(MsgClearAdmin) returns (MsgClearAdminResponse);
  // UpdateParams updates compute module params
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
  rpc UpgradeProposalPassed(MsgUpgradeProposalPassed) returns (MsgUpgradeProposalPassedResponse);
  rpc ContractGovernanceProposal(MsgContractGovernanceProposal) returns (MsgContractGovernanceProposalResponse);
  rpc SetContractGovernance(MsgSetContractGovernance) returns (MsgSetContractGovernanceResponse);
  rpc UpdateMachineWhitelistProposal(MsgUpdateMachineWhitelistProposal) returns (MsgUpdateMachineWhitelistProposalResponse);
  rpc UpdateMachineWhitelist(MsgUpdateMachineWhitelist) returns (MsgUpdateMachineWhitelistResponse);
}

message MsgStoreCode {
  option (gogoproto.goproto_getters) = false;
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "wasm/MsgStoreCode";

  // sender is the canonical address of the sender
  bytes sender = 1 [ (gogoproto.casttype) =
                         "github.com/cosmos/cosmos-sdk/types.AccAddress" ];
  // WASMByteCode can be raw or gzip compressed
  bytes wasm_byte_code = 2 [ (gogoproto.customname) = "WASMByteCode" ];
  // Source is a valid absolute HTTPS URI to the contract's source code,
  // optional
  string source = 3;
  // Builder is a valid docker image name with tag, optional
  string builder = 4;
}

// MsgStoreCodeResponse returns store result data.
message MsgStoreCodeResponse {
  // CodeID is the reference to the stored WASM code
  uint64 code_id = 1 [ (gogoproto.customname) = "CodeID" ];
}

message MsgInstantiateContract {
  option (gogoproto.goproto_getters) = false;
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "wasm/MsgInstantiateContract";

  // sender is the canonical address of the sender
  bytes sender = 1 [ (gogoproto.casttype) =
                         "github.com/cosmos/cosmos-sdk/types.AccAddress" ];
  string callback_code_hash = 2;
  uint64 code_id = 3 [ (gogoproto.customname) = "CodeID" ];
  string label = 4;
  // init_msg is an encrypted input to pass to the contract on init
  bytes init_msg = 5;
  repeated cosmos.base.v1beta1.Coin init_funds = 6 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true,
    (amino.encoding) = "legacy_coins",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
  // used internally for encryption, should always be empty in a signed
  // transaction
  bytes callback_sig = 7 [ (gogoproto.customname) = "CallbackSig" ];
  // Admin is an optional address that can execute migrations
  string admin = 8;
}

// MsgInstantiateContractResponse return instantiation result data
message MsgInstantiateContractResponse {
  // Address is the bech32 address of the new contract instance.
  string address = 1;
  // Data contains base64-encoded bytes to returned from the contract
  bytes data = 2;
}

message MsgExecuteContract {
  option (gogoproto.goproto_getters) = false;
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "wasm/MsgExecuteContract";

  // sender is the canonical address of the sender
  bytes sender = 1 [ (gogoproto.casttype) =
                         "github.com/cosmos/cosmos-sdk/types.AccAddress" ];
  // contract is the canonical address of the contract
  bytes contract = 2 [ (gogoproto.casttype) =
                           "github.com/cosmos/cosmos-sdk/types.AccAddress" ];
  // msg is an encrypted input to pass to the contract on execute
  bytes msg = 3;
  // used internally for encryption, should always be empty in a signed
  // transaction
  string callback_code_hash = 4;
  repeated cosmos.base.v1beta1.Coin sent_funds = 5 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true,
    (amino.encoding) = "legacy_coins",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
  // used internally for encryption, should always be empty in a signed
  // transaction
  bytes callback_sig = 6 [ (gogoproto.customname) = "CallbackSig" ];
}

// MsgExecuteContractResponse returns execution result data.
message MsgExecuteContractResponse {
  // Data contains base64-encoded bytes to returned from the contract
  bytes data = 1;
}

// MsgMigrateContract runs a code upgrade/ downgrade for a smart contract
message MsgMigrateContract {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "wasm/MsgMigrateContract";

  // Sender is the that actor that signed the messages
  string sender = 1;
  // Contract is the address of the smart contract
  string contract = 2;
  // CodeID references the new WASM code
  uint64 code_id = 3 [ (gogoproto.customname) = "CodeID" ];
  // msg is an encrypted input to pass to the contract on migration
  bytes msg = 4;
  // used internally for encryption, should always be empty in a signed
  // transaction
  bytes callback_sig = 7 [ (gogoproto.customname) = "CallbackSig" ];
  // used internally for encryption, should always be empty in a signed
  // transaction
  string callback_code_hash = 8;
}

// MsgMigrateContractResponse returns contract migration result data.
message MsgMigrateContractResponse {
  // Data contains same raw bytes returned as data from the wasm contract.
  // (May be empty)
  bytes data = 1;
}

// MsgUpdateAdmin sets a new admin for a smart contract
message MsgUpdateAdmin {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "wasm/MsgUpdateAdmin";

  // Sender is the that actor that signed the messages
  string sender = 1;
  // NewAdmin address to be set
  string new_admin = 2;
  // Contract is the address of the smart contract
  string contract = 3;
  // used internally for encryption, should always be empty in a signed
  // transaction
  bytes callback_sig = 7 [ (gogoproto.customname) = "CallbackSig" ];
}

// MsgUpdateAdminResponse returns empty data
message MsgUpdateAdminResponse {}

// MsgClearAdmin removes any admin stored for a smart contract
message MsgClearAdmin {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "wasm/MsgClearAdmin";

  // Sender is the that actor that signed the messages
  string sender = 1;
  // Contract is the address of the smart contract
  string contract = 3;
  // used internally for encryption, should always be empty in a signed
  // transaction
  bytes callback_sig = 7 [ (gogoproto.customname) = "CallbackSig" ];
}

// MsgClearAdminResponse returns empty data
message MsgClearAdminResponse {}

// MsgUpdateParams updates params of compute module
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "wasm/MsgUpdateParams";

  // authority is the address of the governance account.
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // params defines the x/compute parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2 [ (gogoproto.nullable) = false ];
}

// MsgClearAdminResponse returns empty data
message MsgUpdateParamsResponse {}
message MsgUpgradeProposalPassed {
  option (gogoproto.goproto_getters) = false;
  option (cosmos.msg.v1.signer) = "sender_address";
  option (amino.name) = "wasm/MsgUpgradeProposalPassed";

  // Sender is the actor that signed the message
  string sender_address = 1;

  // SHA256 hash of the new MREnclave
  bytes mr_enclave_hash = 2;
}

message MsgUpgradeProposalPassedResponse {}

message MigrateContractInfo {
  string address = 1;
  uint64 new_code_id = 2;
}

message UpdateAdminInfo {
  string address = 1;
  string new_admin = 2;  // Empty string to remove admin
}

message MsgContractGovernanceProposal {
  option (gogoproto.goproto_getters) = false;
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "wasm/MsgContractGovernanceProposal";

  string authority = 1;
  string title = 2;
  string description = 3;
  repeated MigrateContractInfo contracts = 4;
  repeated UpdateAdminInfo admin_updates = 5;  // Better field name
}

message MsgContractGovernanceProposalResponse {}

message MsgSetContractGovernance {
  option (gogoproto.goproto_getters) = false;
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "wasm/MsgSetContractGovernance";

  // Sender (must be contract admin)
  string sender = 1;
  // Contract address to update
  string contract_address = 2;
}

message MsgSetContractGovernanceResponse {}

message MsgUpdateMachineWhitelistProposal {
  option (gogoproto.goproto_getters) = false;
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "wasm/MsgUpdateMachineWhitelistProposal";

  string authority = 1;
  string title = 2;
  string description = 3;
  bytes machine_id = 4;
}

message MsgUpdateMachineWhitelistProposalResponse {}

// Execution message - sent by anyone after proposal passes
message MsgUpdateMachineWhitelist {
  option (gogoproto.goproto_getters) = false;
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "wasm/MsgUpdateMachineWhitelist";

  string sender = 1;
  uint64 proposal_id = 2;
  bytes machine_id = 3;
}

message MsgUpdateMachineWhitelistResponse {}
