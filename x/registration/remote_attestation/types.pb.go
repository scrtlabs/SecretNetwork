// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: secret/registration/v1beta1/remote_attestation/types.proto

package remote_attestation

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QuoteReport struct {
	ID                    string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Timestamp             string   `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Version               uint64   `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	IsvEnclaveQuoteStatus string   `protobuf:"bytes,4,opt,name=isv_enclave_quote_status,json=isvEnclaveQuoteStatus,proto3" json:"isvEnclaveQuoteStatus"`
	PlatformInfoBlob      string   `protobuf:"bytes,5,opt,name=platform_info_blob,json=platformInfoBlob,proto3" json:"platformInfoBlob"`
	IsvEnclaveQuoteBody   string   `protobuf:"bytes,6,opt,name=isv_enclave_quote_body,json=isvEnclaveQuoteBody,proto3" json:"isvEnclaveQuoteBody"`
	AdvisoryIDs           []string `protobuf:"bytes,7,rep,name=advisory_ids,json=advisoryIds,proto3" json:"advisoryIDs"`
}

func (m *QuoteReport) Reset()         { *m = QuoteReport{} }
func (m *QuoteReport) String() string { return proto.CompactTextString(m) }
func (*QuoteReport) ProtoMessage()    {}
func (*QuoteReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8a3a0e7f2a8fa26, []int{0}
}
func (m *QuoteReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuoteReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuoteReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuoteReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuoteReport.Merge(m, src)
}
func (m *QuoteReport) XXX_Size() int {
	return m.Size()
}
func (m *QuoteReport) XXX_DiscardUnknown() {
	xxx_messageInfo_QuoteReport.DiscardUnknown(m)
}

var xxx_messageInfo_QuoteReport proto.InternalMessageInfo

type QuoteReportBody struct {
	MrEnclave  string `protobuf:"bytes,1,opt,name=mr_enclave,json=mrEnclave,proto3" json:"mr_enclave,omitempty"`
	MrSigner   string `protobuf:"bytes,2,opt,name=mr_signer,json=mrSigner,proto3" json:"mr_signer,omitempty"`
	ReportData string `protobuf:"bytes,3,opt,name=report_data,json=reportData,proto3" json:"report_data,omitempty"`
}

func (m *QuoteReportBody) Reset()         { *m = QuoteReportBody{} }
func (m *QuoteReportBody) String() string { return proto.CompactTextString(m) }
func (*QuoteReportBody) ProtoMessage()    {}
func (*QuoteReportBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8a3a0e7f2a8fa26, []int{1}
}
func (m *QuoteReportBody) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuoteReportBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuoteReportBody.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuoteReportBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuoteReportBody.Merge(m, src)
}
func (m *QuoteReportBody) XXX_Size() int {
	return m.Size()
}
func (m *QuoteReportBody) XXX_DiscardUnknown() {
	xxx_messageInfo_QuoteReportBody.DiscardUnknown(m)
}

var xxx_messageInfo_QuoteReportBody proto.InternalMessageInfo

type QuoteReportData struct {
	Version    uint64           `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	SignType   uint64           `protobuf:"varint,2,opt,name=sign_type,json=signType,proto3" json:"sign_type,omitempty"`
	ReportBody *QuoteReportBody `protobuf:"bytes,3,opt,name=report_body,json=reportBody,proto3" json:"report_body,omitempty"`
}

func (m *QuoteReportData) Reset()         { *m = QuoteReportData{} }
func (m *QuoteReportData) String() string { return proto.CompactTextString(m) }
func (*QuoteReportData) ProtoMessage()    {}
func (*QuoteReportData) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8a3a0e7f2a8fa26, []int{2}
}
func (m *QuoteReportData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuoteReportData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuoteReportData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuoteReportData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuoteReportData.Merge(m, src)
}
func (m *QuoteReportData) XXX_Size() int {
	return m.Size()
}
func (m *QuoteReportData) XXX_DiscardUnknown() {
	xxx_messageInfo_QuoteReportData.DiscardUnknown(m)
}

var xxx_messageInfo_QuoteReportData proto.InternalMessageInfo

type EndorsedAttestationReport struct {
	Report      []byte `protobuf:"bytes,1,opt,name=report,proto3" json:"report,omitempty"`
	Signature   []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	SigningCert []byte `protobuf:"bytes,3,opt,name=signing_cert,json=signingCert,proto3" json:"signing_cert,omitempty"`
}

func (m *EndorsedAttestationReport) Reset()         { *m = EndorsedAttestationReport{} }
func (m *EndorsedAttestationReport) String() string { return proto.CompactTextString(m) }
func (*EndorsedAttestationReport) ProtoMessage()    {}
func (*EndorsedAttestationReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8a3a0e7f2a8fa26, []int{3}
}
func (m *EndorsedAttestationReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndorsedAttestationReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndorsedAttestationReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EndorsedAttestationReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndorsedAttestationReport.Merge(m, src)
}
func (m *EndorsedAttestationReport) XXX_Size() int {
	return m.Size()
}
func (m *EndorsedAttestationReport) XXX_DiscardUnknown() {
	xxx_messageInfo_EndorsedAttestationReport.DiscardUnknown(m)
}

var xxx_messageInfo_EndorsedAttestationReport proto.InternalMessageInfo

type SGXEC256Signature struct {
	Gx string `protobuf:"bytes,1,opt,name=gx,proto3" json:"gx,omitempty"`
	Gy string `protobuf:"bytes,2,opt,name=gy,proto3" json:"gy,omitempty"`
}

func (m *SGXEC256Signature) Reset()         { *m = SGXEC256Signature{} }
func (m *SGXEC256Signature) String() string { return proto.CompactTextString(m) }
func (*SGXEC256Signature) ProtoMessage()    {}
func (*SGXEC256Signature) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8a3a0e7f2a8fa26, []int{4}
}
func (m *SGXEC256Signature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SGXEC256Signature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SGXEC256Signature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SGXEC256Signature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SGXEC256Signature.Merge(m, src)
}
func (m *SGXEC256Signature) XXX_Size() int {
	return m.Size()
}
func (m *SGXEC256Signature) XXX_DiscardUnknown() {
	xxx_messageInfo_SGXEC256Signature.DiscardUnknown(m)
}

var xxx_messageInfo_SGXEC256Signature proto.InternalMessageInfo

type PlatformInfoBlob struct {
	SgxEpidGroupFlags       uint32             `protobuf:"varint,1,opt,name=sgx_epid_group_flags,json=sgxEpidGroupFlags,proto3" json:"sgx_epid_group_flags,omitempty"`
	SgxTcbEvaluationFlags   uint32             `protobuf:"varint,2,opt,name=sgx_tcb_evaluation_flags,json=sgxTcbEvaluationFlags,proto3" json:"sgx_tcb_evaluation_flags,omitempty"`
	PseEvaluationFlags      uint32             `protobuf:"varint,3,opt,name=pse_evaluation_flags,json=pseEvaluationFlags,proto3" json:"pse_evaluation_flags,omitempty"`
	LatestEquivalentTcbPsvn string             `protobuf:"bytes,4,opt,name=latest_equivalent_tcb_psvn,json=latestEquivalentTcbPsvn,proto3" json:"latest_equivalent_tcb_psvn,omitempty"`
	LatestPseIsvsvn         string             `protobuf:"bytes,5,opt,name=latest_pse_isvsvn,json=latestPseIsvsvn,proto3" json:"latest_pse_isvsvn,omitempty"`
	LatestPsdaSvn           string             `protobuf:"bytes,6,opt,name=latest_psda_svn,json=latestPsdaSvn,proto3" json:"latest_psda_svn,omitempty"`
	Xeid                    uint32             `protobuf:"varint,7,opt,name=xeid,proto3" json:"xeid,omitempty"`
	Gid                     uint32             `protobuf:"varint,8,opt,name=gid,proto3" json:"gid,omitempty"`
	SgxEc256SignatureT      *SGXEC256Signature `protobuf:"bytes,9,opt,name=sgx_ec256_signature_t,json=sgxEc256SignatureT,proto3" json:"sgx_ec256_signature_t,omitempty"`
}

func (m *PlatformInfoBlob) Reset()         { *m = PlatformInfoBlob{} }
func (m *PlatformInfoBlob) String() string { return proto.CompactTextString(m) }
func (*PlatformInfoBlob) ProtoMessage()    {}
func (*PlatformInfoBlob) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8a3a0e7f2a8fa26, []int{5}
}
func (m *PlatformInfoBlob) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlatformInfoBlob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlatformInfoBlob.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlatformInfoBlob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlatformInfoBlob.Merge(m, src)
}
func (m *PlatformInfoBlob) XXX_Size() int {
	return m.Size()
}
func (m *PlatformInfoBlob) XXX_DiscardUnknown() {
	xxx_messageInfo_PlatformInfoBlob.DiscardUnknown(m)
}

var xxx_messageInfo_PlatformInfoBlob proto.InternalMessageInfo

func init() {
	proto.RegisterType((*QuoteReport)(nil), "secret.registration.remote_attestation.v1beta1.QuoteReport")
	proto.RegisterType((*QuoteReportBody)(nil), "secret.registration.remote_attestation.v1beta1.QuoteReportBody")
	proto.RegisterType((*QuoteReportData)(nil), "secret.registration.remote_attestation.v1beta1.QuoteReportData")
	proto.RegisterType((*EndorsedAttestationReport)(nil), "secret.registration.remote_attestation.v1beta1.EndorsedAttestationReport")
	proto.RegisterType((*SGXEC256Signature)(nil), "secret.registration.remote_attestation.v1beta1.SGXEC256Signature")
	proto.RegisterType((*PlatformInfoBlob)(nil), "secret.registration.remote_attestation.v1beta1.PlatformInfoBlob")
}

func init() {
	proto.RegisterFile("secret/registration/v1beta1/remote_attestation/types.proto", fileDescriptor_c8a3a0e7f2a8fa26)
}

var fileDescriptor_c8a3a0e7f2a8fa26 = []byte{
	// 818 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x4f, 0x6f, 0xdb, 0x36,
	0x14, 0x8f, 0xe4, 0x2c, 0x89, 0x68, 0x77, 0x49, 0xb8, 0xa4, 0x55, 0xdb, 0x4d, 0xce, 0x7c, 0x18,
	0x82, 0x1d, 0xac, 0x35, 0x45, 0x3b, 0x60, 0x3b, 0x0c, 0x71, 0xe2, 0x15, 0x01, 0x86, 0x21, 0xa3,
	0x73, 0x18, 0x76, 0xe1, 0x28, 0x91, 0xd1, 0x88, 0x49, 0xa2, 0x4a, 0xd2, 0x9a, 0xfd, 0x05, 0x76,
	0xde, 0xc7, 0x18, 0xf6, 0x49, 0x7a, 0xec, 0x71, 0xc0, 0x00, 0x63, 0x73, 0x6e, 0xfe, 0x14, 0x03,
	0x29, 0xf9, 0x4f, 0xec, 0x5e, 0x7a, 0xe3, 0xfb, 0xbd, 0xf7, 0x7b, 0xbf, 0x9f, 0xf8, 0x1e, 0x05,
	0xbe, 0x52, 0x2c, 0x96, 0x4c, 0x87, 0x92, 0x25, 0x5c, 0x69, 0x49, 0x34, 0x17, 0x79, 0x58, 0x3e,
	0x8b, 0x98, 0x26, 0xcf, 0x42, 0xc9, 0x32, 0xa1, 0x19, 0x26, 0x5a, 0x33, 0xa5, 0xab, 0x94, 0x1e,
	0x17, 0x4c, 0x75, 0x0b, 0x29, 0xb4, 0x80, 0xdd, 0x8a, 0xdb, 0x5d, 0xe5, 0x76, 0x37, 0x39, 0xdd,
	0xba, 0xdd, 0x93, 0xa3, 0x44, 0x24, 0xc2, 0x52, 0x43, 0x73, 0xaa, 0xba, 0x74, 0x7e, 0x6f, 0x80,
	0xe6, 0x0f, 0x43, 0xa1, 0x19, 0x62, 0x85, 0x90, 0x1a, 0x3e, 0x04, 0x2e, 0xa7, 0xbe, 0x73, 0xe2,
	0x9c, 0x7a, 0xbd, 0x9d, 0xe9, 0xa4, 0xed, 0x5e, 0x5d, 0x22, 0x97, 0x53, 0xf8, 0x31, 0xf0, 0x34,
	0xcf, 0x4c, 0xd3, 0xac, 0xf0, 0x5d, 0x93, 0x46, 0x4b, 0x00, 0xfa, 0x60, 0xb7, 0x64, 0x52, 0x71,
	0x91, 0xfb, 0x8d, 0x13, 0xe7, 0x74, 0x1b, 0xcd, 0x43, 0x88, 0x80, 0xcf, 0x55, 0x89, 0x59, 0x1e,
	0xa7, 0xa4, 0x64, 0xf8, 0xb5, 0x91, 0xc2, 0xc6, 0xda, 0x50, 0xf9, 0xdb, 0x56, 0xe5, 0xf1, 0x6c,
	0xd2, 0x3e, 0xe6, 0xaa, 0xec, 0x57, 0x25, 0xd6, 0xcc, 0xc0, 0x16, 0xa0, 0x77, 0xc3, 0xb0, 0x07,
	0x60, 0x91, 0x12, 0x7d, 0x2b, 0x64, 0x86, 0x79, 0x7e, 0x2b, 0x70, 0x94, 0x8a, 0xc8, 0xff, 0xc0,
	0x76, 0x3b, 0x9a, 0x4d, 0xda, 0x07, 0xf3, 0xec, 0x55, 0x7e, 0x2b, 0x7a, 0xa9, 0x88, 0xd0, 0x06,
	0x02, 0xbf, 0x03, 0x0f, 0x37, 0x7d, 0x45, 0x82, 0x8e, 0xfd, 0x1d, 0xdb, 0xe7, 0xd1, 0x6c, 0xd2,
	0xfe, 0x68, 0x4d, 0xbe, 0x27, 0xe8, 0x18, 0xbd, 0x0b, 0x84, 0xe7, 0xa0, 0x45, 0x68, 0xc9, 0x95,
	0x90, 0x63, 0xcc, 0xa9, 0xf2, 0x77, 0x4f, 0x1a, 0xa7, 0x5e, 0x2f, 0x98, 0x4e, 0xda, 0xcd, 0xf3,
	0x1a, 0xbf, 0xba, 0x54, 0xb3, 0x49, 0xbb, 0x49, 0x96, 0x21, 0x5a, 0x06, 0x54, 0x75, 0x72, 0xb0,
	0xbf, 0x32, 0x07, 0xdb, 0xf5, 0x13, 0x00, 0x32, 0x39, 0xb7, 0x58, 0xcd, 0x04, 0x79, 0x99, 0xac,
	0xd5, 0xe1, 0x53, 0xe0, 0x65, 0x12, 0x2b, 0x9e, 0xe4, 0x4c, 0xd6, 0x23, 0xd9, 0xcb, 0xe4, 0xc0,
	0xc6, 0xb0, 0x0d, 0x9a, 0xd2, 0x76, 0xc2, 0x94, 0x68, 0x62, 0xa7, 0xe2, 0x21, 0x50, 0x41, 0x97,
	0x44, 0x93, 0xce, 0x5f, 0xce, 0x3d, 0x41, 0x83, 0xad, 0x8e, 0xd1, 0xb9, 0x3f, 0xc6, 0xa7, 0xc0,
	0x33, 0x42, 0xd8, 0x2c, 0xa0, 0xd5, 0xda, 0x46, 0x7b, 0x06, 0xb8, 0x19, 0x17, 0x0c, 0xfe, 0xbc,
	0xd0, 0xb2, 0x17, 0x68, 0xb4, 0x9a, 0x67, 0xdf, 0xbc, 0xe7, 0x7e, 0x76, 0xd7, 0xbe, 0x7e, 0x6e,
	0xd6, 0x9c, 0x3b, 0x1a, 0x3c, 0xee, 0xe7, 0x54, 0x48, 0xc5, 0xe8, 0xf9, 0x92, 0xba, 0x58, 0xd9,
	0x9d, 0xaa, 0xd4, 0x9a, 0x6e, 0xa1, 0x3a, 0x32, 0x2b, 0x6b, 0x2c, 0x12, 0x3d, 0x94, 0x95, 0xe7,
	0x16, 0x5a, 0x02, 0xf0, 0x53, 0xd0, 0x32, 0x01, 0xcf, 0x13, 0x1c, 0x33, 0xa9, 0xad, 0xeb, 0x16,
	0x6a, 0xd6, 0xd8, 0x05, 0x93, 0xba, 0xf3, 0x1c, 0x1c, 0x0e, 0x5e, 0xfd, 0xd8, 0xbf, 0x38, 0x7b,
	0xf1, 0x72, 0xb0, 0xe0, 0x7d, 0x08, 0xdc, 0x64, 0x54, 0x0f, 0xc3, 0x4d, 0x46, 0x36, 0x1e, 0xd7,
	0xd7, 0xef, 0x26, 0xe3, 0xce, 0x3f, 0x0d, 0x70, 0x70, 0xbd, 0xbe, 0x6d, 0x21, 0x38, 0x52, 0xc9,
	0x08, 0xb3, 0x82, 0x53, 0x9c, 0x48, 0x31, 0x2c, 0xf0, 0x6d, 0x4a, 0x12, 0x65, 0xdb, 0x3c, 0x40,
	0x87, 0x2a, 0x19, 0xf5, 0x0b, 0x4e, 0x5f, 0x99, 0xcc, 0xb7, 0x26, 0x01, 0xbf, 0x04, 0xbe, 0x21,
	0xe8, 0x38, 0xc2, 0xac, 0x24, 0xe9, 0xd0, 0x7e, 0x6f, 0x4d, 0x72, 0x2d, 0xe9, 0x58, 0x25, 0xa3,
	0x9b, 0x38, 0xea, 0x2f, 0xb2, 0x15, 0xf1, 0x0b, 0x70, 0x54, 0x28, 0xb6, 0x49, 0x6a, 0x58, 0x12,
	0x2c, 0x14, 0x5b, 0x67, 0x7c, 0x0d, 0x9e, 0xa4, 0xc4, 0xdc, 0x29, 0x66, 0xaf, 0x87, 0xbc, 0x24,
	0x29, 0xcb, 0xb5, 0x15, 0x2e, 0x54, 0x99, 0x57, 0x6f, 0x14, 0x3d, 0xaa, 0x2a, 0xfa, 0x8b, 0x82,
	0x9b, 0x38, 0xba, 0x56, 0x65, 0x0e, 0x3f, 0x07, 0x87, 0x35, 0xd9, 0xa8, 0x72, 0x55, 0x1a, 0x8e,
	0x7d, 0x89, 0x68, 0xbf, 0x4a, 0x5c, 0x2b, 0x76, 0x65, 0x61, 0xf8, 0x19, 0xd8, 0x5f, 0xd4, 0x52,
	0x82, 0x4d, 0xa5, 0x7d, 0x6b, 0xe8, 0xc1, 0xbc, 0x92, 0x92, 0x41, 0x99, 0x43, 0x08, 0xb6, 0x47,
	0x8c, 0x53, 0x7f, 0xd7, 0x5a, 0xb6, 0x67, 0x78, 0x00, 0x1a, 0x09, 0xa7, 0xfe, 0x9e, 0x85, 0xcc,
	0x11, 0x6a, 0x70, 0x6c, 0xaf, 0x34, 0x3e, 0x7b, 0xf1, 0x12, 0x2f, 0xc6, 0x8a, 0xb5, 0xef, 0xd9,
	0xf5, 0x3b, 0x7f, 0xdf, 0xf5, 0xdb, 0x98, 0x34, 0x82, 0x66, 0x2c, 0xf1, 0x2a, 0x74, 0xd3, 0x63,
	0x6f, 0xfe, 0x0b, 0xb6, 0xfe, 0x9c, 0x06, 0xce, 0x9b, 0x69, 0xe0, 0xbc, 0x9d, 0x06, 0xce, 0xbf,
	0xd3, 0xc0, 0xf9, 0xe3, 0x2e, 0xd8, 0x7a, 0x7b, 0x17, 0x6c, 0xfd, 0x7d, 0x17, 0x6c, 0xfd, 0x74,
	0x91, 0x70, 0xfd, 0xcb, 0x30, 0xea, 0xc6, 0x22, 0x0b, 0x55, 0x2c, 0x75, 0x4a, 0x22, 0x15, 0x0e,
	0xac, 0x97, 0xef, 0x99, 0xfe, 0x4d, 0xc8, 0x5f, 0xc3, 0xd1, 0xfd, 0xff, 0xfd, 0xa6, 0xa9, 0x68,
	0xc7, 0xfe, 0x9c, 0x9f, 0xff, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x14, 0x1b, 0x64, 0xf4, 0x20, 0x06,
	0x00, 0x00,
}

func (this *QuoteReport) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QuoteReport)
	if !ok {
		that2, ok := that.(QuoteReport)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.IsvEnclaveQuoteStatus != that1.IsvEnclaveQuoteStatus {
		return false
	}
	if this.PlatformInfoBlob != that1.PlatformInfoBlob {
		return false
	}
	if this.IsvEnclaveQuoteBody != that1.IsvEnclaveQuoteBody {
		return false
	}
	if len(this.AdvisoryIDs) != len(that1.AdvisoryIDs) {
		return false
	}
	for i := range this.AdvisoryIDs {
		if this.AdvisoryIDs[i] != that1.AdvisoryIDs[i] {
			return false
		}
	}
	return true
}
func (this *QuoteReportBody) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QuoteReportBody)
	if !ok {
		that2, ok := that.(QuoteReportBody)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MrEnclave != that1.MrEnclave {
		return false
	}
	if this.MrSigner != that1.MrSigner {
		return false
	}
	if this.ReportData != that1.ReportData {
		return false
	}
	return true
}
func (this *QuoteReportData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QuoteReportData)
	if !ok {
		that2, ok := that.(QuoteReportData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.SignType != that1.SignType {
		return false
	}
	if !this.ReportBody.Equal(that1.ReportBody) {
		return false
	}
	return true
}
func (this *EndorsedAttestationReport) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndorsedAttestationReport)
	if !ok {
		that2, ok := that.(EndorsedAttestationReport)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Report, that1.Report) {
		return false
	}
	if !bytes.Equal(this.Signature, that1.Signature) {
		return false
	}
	if !bytes.Equal(this.SigningCert, that1.SigningCert) {
		return false
	}
	return true
}
func (this *SGXEC256Signature) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SGXEC256Signature)
	if !ok {
		that2, ok := that.(SGXEC256Signature)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Gx != that1.Gx {
		return false
	}
	if this.Gy != that1.Gy {
		return false
	}
	return true
}
func (this *PlatformInfoBlob) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PlatformInfoBlob)
	if !ok {
		that2, ok := that.(PlatformInfoBlob)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SgxEpidGroupFlags != that1.SgxEpidGroupFlags {
		return false
	}
	if this.SgxTcbEvaluationFlags != that1.SgxTcbEvaluationFlags {
		return false
	}
	if this.PseEvaluationFlags != that1.PseEvaluationFlags {
		return false
	}
	if this.LatestEquivalentTcbPsvn != that1.LatestEquivalentTcbPsvn {
		return false
	}
	if this.LatestPseIsvsvn != that1.LatestPseIsvsvn {
		return false
	}
	if this.LatestPsdaSvn != that1.LatestPsdaSvn {
		return false
	}
	if this.Xeid != that1.Xeid {
		return false
	}
	if this.Gid != that1.Gid {
		return false
	}
	if !this.SgxEc256SignatureT.Equal(that1.SgxEc256SignatureT) {
		return false
	}
	return true
}
func (m *QuoteReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuoteReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuoteReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AdvisoryIDs) > 0 {
		for iNdEx := len(m.AdvisoryIDs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AdvisoryIDs[iNdEx])
			copy(dAtA[i:], m.AdvisoryIDs[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.AdvisoryIDs[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.IsvEnclaveQuoteBody) > 0 {
		i -= len(m.IsvEnclaveQuoteBody)
		copy(dAtA[i:], m.IsvEnclaveQuoteBody)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.IsvEnclaveQuoteBody)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PlatformInfoBlob) > 0 {
		i -= len(m.PlatformInfoBlob)
		copy(dAtA[i:], m.PlatformInfoBlob)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.PlatformInfoBlob)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.IsvEnclaveQuoteStatus) > 0 {
		i -= len(m.IsvEnclaveQuoteStatus)
		copy(dAtA[i:], m.IsvEnclaveQuoteStatus)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.IsvEnclaveQuoteStatus)))
		i--
		dAtA[i] = 0x22
	}
	if m.Version != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Timestamp) > 0 {
		i -= len(m.Timestamp)
		copy(dAtA[i:], m.Timestamp)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Timestamp)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuoteReportBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuoteReportBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuoteReportBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReportData) > 0 {
		i -= len(m.ReportData)
		copy(dAtA[i:], m.ReportData)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ReportData)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MrSigner) > 0 {
		i -= len(m.MrSigner)
		copy(dAtA[i:], m.MrSigner)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.MrSigner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MrEnclave) > 0 {
		i -= len(m.MrEnclave)
		copy(dAtA[i:], m.MrEnclave)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.MrEnclave)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuoteReportData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuoteReportData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuoteReportData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReportBody != nil {
		{
			size, err := m.ReportBody.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.SignType != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.SignType))
		i--
		dAtA[i] = 0x10
	}
	if m.Version != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EndorsedAttestationReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndorsedAttestationReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndorsedAttestationReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SigningCert) > 0 {
		i -= len(m.SigningCert)
		copy(dAtA[i:], m.SigningCert)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SigningCert)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Report) > 0 {
		i -= len(m.Report)
		copy(dAtA[i:], m.Report)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Report)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SGXEC256Signature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SGXEC256Signature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SGXEC256Signature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Gy) > 0 {
		i -= len(m.Gy)
		copy(dAtA[i:], m.Gy)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Gy)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Gx) > 0 {
		i -= len(m.Gx)
		copy(dAtA[i:], m.Gx)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Gx)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PlatformInfoBlob) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlatformInfoBlob) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlatformInfoBlob) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SgxEc256SignatureT != nil {
		{
			size, err := m.SgxEc256SignatureT.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Gid != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Gid))
		i--
		dAtA[i] = 0x40
	}
	if m.Xeid != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Xeid))
		i--
		dAtA[i] = 0x38
	}
	if len(m.LatestPsdaSvn) > 0 {
		i -= len(m.LatestPsdaSvn)
		copy(dAtA[i:], m.LatestPsdaSvn)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.LatestPsdaSvn)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.LatestPseIsvsvn) > 0 {
		i -= len(m.LatestPseIsvsvn)
		copy(dAtA[i:], m.LatestPseIsvsvn)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.LatestPseIsvsvn)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.LatestEquivalentTcbPsvn) > 0 {
		i -= len(m.LatestEquivalentTcbPsvn)
		copy(dAtA[i:], m.LatestEquivalentTcbPsvn)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.LatestEquivalentTcbPsvn)))
		i--
		dAtA[i] = 0x22
	}
	if m.PseEvaluationFlags != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.PseEvaluationFlags))
		i--
		dAtA[i] = 0x18
	}
	if m.SgxTcbEvaluationFlags != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.SgxTcbEvaluationFlags))
		i--
		dAtA[i] = 0x10
	}
	if m.SgxEpidGroupFlags != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.SgxEpidGroupFlags))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QuoteReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Timestamp)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovTypes(uint64(m.Version))
	}
	l = len(m.IsvEnclaveQuoteStatus)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.PlatformInfoBlob)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.IsvEnclaveQuoteBody)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.AdvisoryIDs) > 0 {
		for _, s := range m.AdvisoryIDs {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *QuoteReportBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MrEnclave)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.MrSigner)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ReportData)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *QuoteReportData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovTypes(uint64(m.Version))
	}
	if m.SignType != 0 {
		n += 1 + sovTypes(uint64(m.SignType))
	}
	if m.ReportBody != nil {
		l = m.ReportBody.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *EndorsedAttestationReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Report)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.SigningCert)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *SGXEC256Signature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Gx)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Gy)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *PlatformInfoBlob) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SgxEpidGroupFlags != 0 {
		n += 1 + sovTypes(uint64(m.SgxEpidGroupFlags))
	}
	if m.SgxTcbEvaluationFlags != 0 {
		n += 1 + sovTypes(uint64(m.SgxTcbEvaluationFlags))
	}
	if m.PseEvaluationFlags != 0 {
		n += 1 + sovTypes(uint64(m.PseEvaluationFlags))
	}
	l = len(m.LatestEquivalentTcbPsvn)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.LatestPseIsvsvn)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.LatestPsdaSvn)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Xeid != 0 {
		n += 1 + sovTypes(uint64(m.Xeid))
	}
	if m.Gid != 0 {
		n += 1 + sovTypes(uint64(m.Gid))
	}
	if m.SgxEc256SignatureT != nil {
		l = m.SgxEc256SignatureT.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QuoteReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuoteReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuoteReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsvEnclaveQuoteStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IsvEnclaveQuoteStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatformInfoBlob", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlatformInfoBlob = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsvEnclaveQuoteBody", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IsvEnclaveQuoteBody = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvisoryIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdvisoryIDs = append(m.AdvisoryIDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuoteReportBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuoteReportBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuoteReportBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MrEnclave", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MrEnclave = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MrSigner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MrSigner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReportData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuoteReportData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuoteReportData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuoteReportData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignType", wireType)
			}
			m.SignType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignType |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportBody", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReportBody == nil {
				m.ReportBody = &QuoteReportBody{}
			}
			if err := m.ReportBody.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndorsedAttestationReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndorsedAttestationReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndorsedAttestationReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Report", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Report = append(m.Report[:0], dAtA[iNdEx:postIndex]...)
			if m.Report == nil {
				m.Report = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigningCert", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SigningCert = append(m.SigningCert[:0], dAtA[iNdEx:postIndex]...)
			if m.SigningCert == nil {
				m.SigningCert = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SGXEC256Signature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SGXEC256Signature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SGXEC256Signature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gx = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlatformInfoBlob) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlatformInfoBlob: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlatformInfoBlob: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SgxEpidGroupFlags", wireType)
			}
			m.SgxEpidGroupFlags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SgxEpidGroupFlags |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SgxTcbEvaluationFlags", wireType)
			}
			m.SgxTcbEvaluationFlags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SgxTcbEvaluationFlags |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PseEvaluationFlags", wireType)
			}
			m.PseEvaluationFlags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PseEvaluationFlags |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestEquivalentTcbPsvn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LatestEquivalentTcbPsvn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestPseIsvsvn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LatestPseIsvsvn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestPsdaSvn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LatestPsdaSvn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Xeid", wireType)
			}
			m.Xeid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Xeid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gid", wireType)
			}
			m.Gid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SgxEc256SignatureT", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SgxEc256SignatureT == nil {
				m.SgxEc256SignatureT = &SGXEC256Signature{}
			}
			if err := m.SgxEc256SignatureT.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
