//! This file should be autogenerated based on the headers created from the .edl file.

use enclave_ffi_types::{Ctx, EnclaveBuffer, OcallReturn, UntrustedVmError, UserSpaceBuffer};
use sgx_types::*;

// #[cfg(feature = "query-only")]
// extern "C" {
//     pub fn ocall_allocate_qe(
//         retval: *mut UserSpaceBuffer,
//         buffer: *const u8,
//         length: usize,
//     ) -> sgx_status_t;
//
//     pub fn ocall_read_db_qe(
//         retval: *mut OcallReturn,
//         context: Ctx,
//         vm_error: *mut UntrustedVmError,
//         gas_used: *mut u64,
//         value: *mut EnclaveBuffer,
//         key: *const u8,
//         key_len: usize,
//     ) -> sgx_status_t;
//
//     pub fn ocall_query_chain_qe(
//         retval: *mut OcallReturn,
//         context: Ctx,
//         vm_error: *mut UntrustedVmError,
//         gas_used: *mut u64,
//         gas_limit: u64,
//         value: *mut EnclaveBuffer,
//         query: *const u8,
//         query_len: usize,
//     ) -> sgx_status_t;
// }

// /// Alias for ocall_allocate_qe
// #[cfg(feature = "query-only")]
// #[allow(non_upper_case_globals)]
// pub const ocall_allocate: unsafe extern "C" fn(
//     retval: *mut UserSpaceBuffer,
//     buffer: *const u8,
//     length: usize,
// ) -> sgx_status_t = ocall_allocate_qe;

// /// Alias for ocall_read_db_qe
// #[cfg(feature = "query-only")]
// #[allow(non_upper_case_globals)]
// pub const ocall_read_db: unsafe extern "C" fn(
//     retval: *mut OcallReturn,
//     context: Ctx,
//     vm_error: *mut UntrustedVmError,
//     gas_used: *mut u64,
//     value: *mut EnclaveBuffer,
//     key: *const u8,
//     key_len: usize,
// ) -> sgx_status_t = ocall_read_db_qe;

// /// Alias for ocall_query_chain_qe
// #[cfg(feature = "query-only")]
// #[allow(non_upper_case_globals)]
// pub const ocall_query_chain: unsafe extern "C" fn(
//     retval: *mut OcallReturn,
//     context: Ctx,
//     vm_error: *mut UntrustedVmError,
//     gas_used: *mut u64,
//     gas_limit: u64,
//     value: *mut EnclaveBuffer,
//     query: *const u8,
//     query_len: usize,
// ) -> sgx_status_t = ocall_query_chain_qe;

// #[cfg(not(feature = "query-only"))]
extern "C" {
    pub fn ocall_allocate(
        retval: *mut UserSpaceBuffer,
        buffer: *const u8,
        length: usize,
    ) -> sgx_status_t;

    pub fn ocall_read_db(
        retval: *mut OcallReturn,
        context: Ctx,
        vm_error: *mut UntrustedVmError,
        gas_used: *mut u64,
        value: *mut EnclaveBuffer,
        key: *const u8,
        key_len: usize,
    ) -> sgx_status_t;

    pub fn ocall_query_chain(
        retval: *mut OcallReturn,
        context: Ctx,
        vm_error: *mut UntrustedVmError,
        gas_used: *mut u64,
        gas_limit: u64,
        value: *mut EnclaveBuffer,
        query: *const u8,
        query_len: usize,
        query_depth: u32,
    ) -> sgx_status_t;

    pub fn ocall_remove_db(
        retval: *mut OcallReturn,
        context: Ctx,
        vm_error: *mut UntrustedVmError,
        gas_used: *mut u64,
        key: *const u8,
        key_len: usize,
    ) -> sgx_status_t;

    pub fn ocall_write_db(
        retval: *mut OcallReturn,
        context: Ctx,
        vm_error: *mut UntrustedVmError,
        gas_used: *mut u64,
        key: *const u8,
        key_len: usize,
        value: *const u8,
        value_len: usize,
    ) -> sgx_status_t;
}
