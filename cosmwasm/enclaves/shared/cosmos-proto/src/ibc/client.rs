// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `ibc/core/client/v1/client.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct IdentifiedClientState {
    // message fields
    pub client_id: ::std::string::String,
    pub client_state: ::protobuf::SingularPtrField<::protobuf::well_known_types::Any>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IdentifiedClientState {
    fn default() -> &'a IdentifiedClientState {
        <IdentifiedClientState as ::protobuf::Message>::default_instance()
    }
}

impl IdentifiedClientState {
    pub fn new() -> IdentifiedClientState {
        ::std::default::Default::default()
    }

    // string client_id = 1;


    pub fn get_client_id(&self) -> &str {
        &self.client_id
    }
    pub fn clear_client_id(&mut self) {
        self.client_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: ::std::string::String) {
        self.client_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_id(&mut self) -> &mut ::std::string::String {
        &mut self.client_id
    }

    // Take field
    pub fn take_client_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.client_id, ::std::string::String::new())
    }

    // .google.protobuf.Any client_state = 2;


    pub fn get_client_state(&self) -> &::protobuf::well_known_types::Any {
        self.client_state.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Any as ::protobuf::Message>::default_instance())
    }
    pub fn clear_client_state(&mut self) {
        self.client_state.clear();
    }

    pub fn has_client_state(&self) -> bool {
        self.client_state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_state(&mut self, v: ::protobuf::well_known_types::Any) {
        self.client_state = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_state(&mut self) -> &mut ::protobuf::well_known_types::Any {
        if self.client_state.is_none() {
            self.client_state.set_default();
        }
        self.client_state.as_mut().unwrap()
    }

    // Take field
    pub fn take_client_state(&mut self) -> ::protobuf::well_known_types::Any {
        self.client_state.take().unwrap_or_else(|| ::protobuf::well_known_types::Any::new())
    }
}

impl ::protobuf::Message for IdentifiedClientState {
    fn is_initialized(&self) -> bool {
        for v in &self.client_state {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.client_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.client_state)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.client_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.client_id);
        }
        if let Some(ref v) = self.client_state.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.client_id.is_empty() {
            os.write_string(1, &self.client_id)?;
        }
        if let Some(ref v) = self.client_state.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IdentifiedClientState {
        IdentifiedClientState::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "client_id",
                |m: &IdentifiedClientState| { &m.client_id },
                |m: &mut IdentifiedClientState| { &mut m.client_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Any>>(
                "client_state",
                |m: &IdentifiedClientState| { &m.client_state },
                |m: &mut IdentifiedClientState| { &mut m.client_state },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<IdentifiedClientState>(
                "IdentifiedClientState",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static IdentifiedClientState {
        static instance: ::protobuf::rt::LazyV2<IdentifiedClientState> = ::protobuf::rt::LazyV2::INIT;
        instance.get(IdentifiedClientState::new)
    }
}

impl ::protobuf::Clear for IdentifiedClientState {
    fn clear(&mut self) {
        self.client_id.clear();
        self.client_state.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for IdentifiedClientState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IdentifiedClientState {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusStateWithHeight {
    // message fields
    pub height: ::protobuf::SingularPtrField<Height>,
    pub consensus_state: ::protobuf::SingularPtrField<::protobuf::well_known_types::Any>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusStateWithHeight {
    fn default() -> &'a ConsensusStateWithHeight {
        <ConsensusStateWithHeight as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusStateWithHeight {
    pub fn new() -> ConsensusStateWithHeight {
        ::std::default::Default::default()
    }

    // .ibc.core.client.v1.Height height = 1;


    pub fn get_height(&self) -> &Height {
        self.height.as_ref().unwrap_or_else(|| <Height as ::protobuf::Message>::default_instance())
    }
    pub fn clear_height(&mut self) {
        self.height.clear();
    }

    pub fn has_height(&self) -> bool {
        self.height.is_some()
    }

    // Param is passed by value, moved
    pub fn set_height(&mut self, v: Height) {
        self.height = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_height(&mut self) -> &mut Height {
        if self.height.is_none() {
            self.height.set_default();
        }
        self.height.as_mut().unwrap()
    }

    // Take field
    pub fn take_height(&mut self) -> Height {
        self.height.take().unwrap_or_else(|| Height::new())
    }

    // .google.protobuf.Any consensus_state = 2;


    pub fn get_consensus_state(&self) -> &::protobuf::well_known_types::Any {
        self.consensus_state.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Any as ::protobuf::Message>::default_instance())
    }
    pub fn clear_consensus_state(&mut self) {
        self.consensus_state.clear();
    }

    pub fn has_consensus_state(&self) -> bool {
        self.consensus_state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_consensus_state(&mut self, v: ::protobuf::well_known_types::Any) {
        self.consensus_state = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_consensus_state(&mut self) -> &mut ::protobuf::well_known_types::Any {
        if self.consensus_state.is_none() {
            self.consensus_state.set_default();
        }
        self.consensus_state.as_mut().unwrap()
    }

    // Take field
    pub fn take_consensus_state(&mut self) -> ::protobuf::well_known_types::Any {
        self.consensus_state.take().unwrap_or_else(|| ::protobuf::well_known_types::Any::new())
    }
}

impl ::protobuf::Message for ConsensusStateWithHeight {
    fn is_initialized(&self) -> bool {
        for v in &self.height {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.consensus_state {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.height)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.consensus_state)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.height.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.consensus_state.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.height.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.consensus_state.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusStateWithHeight {
        ConsensusStateWithHeight::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Height>>(
                "height",
                |m: &ConsensusStateWithHeight| { &m.height },
                |m: &mut ConsensusStateWithHeight| { &mut m.height },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Any>>(
                "consensus_state",
                |m: &ConsensusStateWithHeight| { &m.consensus_state },
                |m: &mut ConsensusStateWithHeight| { &mut m.consensus_state },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConsensusStateWithHeight>(
                "ConsensusStateWithHeight",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConsensusStateWithHeight {
        static instance: ::protobuf::rt::LazyV2<ConsensusStateWithHeight> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConsensusStateWithHeight::new)
    }
}

impl ::protobuf::Clear for ConsensusStateWithHeight {
    fn clear(&mut self) {
        self.height.clear();
        self.consensus_state.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusStateWithHeight {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusStateWithHeight {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientConsensusStates {
    // message fields
    pub client_id: ::std::string::String,
    pub consensus_states: ::protobuf::RepeatedField<ConsensusStateWithHeight>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientConsensusStates {
    fn default() -> &'a ClientConsensusStates {
        <ClientConsensusStates as ::protobuf::Message>::default_instance()
    }
}

impl ClientConsensusStates {
    pub fn new() -> ClientConsensusStates {
        ::std::default::Default::default()
    }

    // string client_id = 1;


    pub fn get_client_id(&self) -> &str {
        &self.client_id
    }
    pub fn clear_client_id(&mut self) {
        self.client_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: ::std::string::String) {
        self.client_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_id(&mut self) -> &mut ::std::string::String {
        &mut self.client_id
    }

    // Take field
    pub fn take_client_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.client_id, ::std::string::String::new())
    }

    // repeated .ibc.core.client.v1.ConsensusStateWithHeight consensus_states = 2;


    pub fn get_consensus_states(&self) -> &[ConsensusStateWithHeight] {
        &self.consensus_states
    }
    pub fn clear_consensus_states(&mut self) {
        self.consensus_states.clear();
    }

    // Param is passed by value, moved
    pub fn set_consensus_states(&mut self, v: ::protobuf::RepeatedField<ConsensusStateWithHeight>) {
        self.consensus_states = v;
    }

    // Mutable pointer to the field.
    pub fn mut_consensus_states(&mut self) -> &mut ::protobuf::RepeatedField<ConsensusStateWithHeight> {
        &mut self.consensus_states
    }

    // Take field
    pub fn take_consensus_states(&mut self) -> ::protobuf::RepeatedField<ConsensusStateWithHeight> {
        ::std::mem::replace(&mut self.consensus_states, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ClientConsensusStates {
    fn is_initialized(&self) -> bool {
        for v in &self.consensus_states {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.client_id)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.consensus_states)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.client_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.client_id);
        }
        for value in &self.consensus_states {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.client_id.is_empty() {
            os.write_string(1, &self.client_id)?;
        }
        for v in &self.consensus_states {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientConsensusStates {
        ClientConsensusStates::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "client_id",
                |m: &ClientConsensusStates| { &m.client_id },
                |m: &mut ClientConsensusStates| { &mut m.client_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ConsensusStateWithHeight>>(
                "consensus_states",
                |m: &ClientConsensusStates| { &m.consensus_states },
                |m: &mut ClientConsensusStates| { &mut m.consensus_states },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientConsensusStates>(
                "ClientConsensusStates",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClientConsensusStates {
        static instance: ::protobuf::rt::LazyV2<ClientConsensusStates> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClientConsensusStates::new)
    }
}

impl ::protobuf::Clear for ClientConsensusStates {
    fn clear(&mut self) {
        self.client_id.clear();
        self.consensus_states.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientConsensusStates {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientConsensusStates {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Height {
    // message fields
    pub revision_number: u64,
    pub revision_height: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Height {
    fn default() -> &'a Height {
        <Height as ::protobuf::Message>::default_instance()
    }
}

impl Height {
    pub fn new() -> Height {
        ::std::default::Default::default()
    }

    // uint64 revision_number = 1;


    pub fn get_revision_number(&self) -> u64 {
        self.revision_number
    }
    pub fn clear_revision_number(&mut self) {
        self.revision_number = 0;
    }

    // Param is passed by value, moved
    pub fn set_revision_number(&mut self, v: u64) {
        self.revision_number = v;
    }

    // uint64 revision_height = 2;


    pub fn get_revision_height(&self) -> u64 {
        self.revision_height
    }
    pub fn clear_revision_height(&mut self) {
        self.revision_height = 0;
    }

    // Param is passed by value, moved
    pub fn set_revision_height(&mut self, v: u64) {
        self.revision_height = v;
    }
}

impl ::protobuf::Message for Height {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.revision_number = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.revision_height = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.revision_number != 0 {
            my_size += ::protobuf::rt::value_size(1, self.revision_number, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.revision_height != 0 {
            my_size += ::protobuf::rt::value_size(2, self.revision_height, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.revision_number != 0 {
            os.write_uint64(1, self.revision_number)?;
        }
        if self.revision_height != 0 {
            os.write_uint64(2, self.revision_height)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Height {
        Height::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "revision_number",
                |m: &Height| { &m.revision_number },
                |m: &mut Height| { &mut m.revision_number },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "revision_height",
                |m: &Height| { &m.revision_height },
                |m: &mut Height| { &mut m.revision_height },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Height>(
                "Height",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Height {
        static instance: ::protobuf::rt::LazyV2<Height> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Height::new)
    }
}

impl ::protobuf::Clear for Height {
    fn clear(&mut self) {
        self.revision_number = 0;
        self.revision_height = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Height {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Height {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Params {
    // message fields
    pub allowed_clients: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Params {
    fn default() -> &'a Params {
        <Params as ::protobuf::Message>::default_instance()
    }
}

impl Params {
    pub fn new() -> Params {
        ::std::default::Default::default()
    }

    // repeated string allowed_clients = 1;


    pub fn get_allowed_clients(&self) -> &[::std::string::String] {
        &self.allowed_clients
    }
    pub fn clear_allowed_clients(&mut self) {
        self.allowed_clients.clear();
    }

    // Param is passed by value, moved
    pub fn set_allowed_clients(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.allowed_clients = v;
    }

    // Mutable pointer to the field.
    pub fn mut_allowed_clients(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.allowed_clients
    }

    // Take field
    pub fn take_allowed_clients(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.allowed_clients, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Params {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.allowed_clients)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.allowed_clients {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.allowed_clients {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Params {
        Params::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "allowed_clients",
                |m: &Params| { &m.allowed_clients },
                |m: &mut Params| { &mut m.allowed_clients },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Params>(
                "Params",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Params {
        static instance: ::protobuf::rt::LazyV2<Params> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Params::new)
    }
}

impl ::protobuf::Clear for Params {
    fn clear(&mut self) {
        self.allowed_clients.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Params {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Params {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientUpdateProposal {
    // message fields
    pub title: ::std::string::String,
    pub description: ::std::string::String,
    pub subject_client_id: ::std::string::String,
    pub substitute_client_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientUpdateProposal {
    fn default() -> &'a ClientUpdateProposal {
        <ClientUpdateProposal as ::protobuf::Message>::default_instance()
    }
}

impl ClientUpdateProposal {
    pub fn new() -> ClientUpdateProposal {
        ::std::default::Default::default()
    }

    // string title = 1;


    pub fn get_title(&self) -> &str {
        &self.title
    }
    pub fn clear_title(&mut self) {
        self.title.clear();
    }

    // Param is passed by value, moved
    pub fn set_title(&mut self, v: ::std::string::String) {
        self.title = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_title(&mut self) -> &mut ::std::string::String {
        &mut self.title
    }

    // Take field
    pub fn take_title(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.title, ::std::string::String::new())
    }

    // string description = 2;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }

    // string subject_client_id = 3;


    pub fn get_subject_client_id(&self) -> &str {
        &self.subject_client_id
    }
    pub fn clear_subject_client_id(&mut self) {
        self.subject_client_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_subject_client_id(&mut self, v: ::std::string::String) {
        self.subject_client_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_subject_client_id(&mut self) -> &mut ::std::string::String {
        &mut self.subject_client_id
    }

    // Take field
    pub fn take_subject_client_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.subject_client_id, ::std::string::String::new())
    }

    // string substitute_client_id = 4;


    pub fn get_substitute_client_id(&self) -> &str {
        &self.substitute_client_id
    }
    pub fn clear_substitute_client_id(&mut self) {
        self.substitute_client_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_substitute_client_id(&mut self, v: ::std::string::String) {
        self.substitute_client_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_substitute_client_id(&mut self) -> &mut ::std::string::String {
        &mut self.substitute_client_id
    }

    // Take field
    pub fn take_substitute_client_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.substitute_client_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ClientUpdateProposal {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.title)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.subject_client_id)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.substitute_client_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.title.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.title);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.description);
        }
        if !self.subject_client_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.subject_client_id);
        }
        if !self.substitute_client_id.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.substitute_client_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.title.is_empty() {
            os.write_string(1, &self.title)?;
        }
        if !self.description.is_empty() {
            os.write_string(2, &self.description)?;
        }
        if !self.subject_client_id.is_empty() {
            os.write_string(3, &self.subject_client_id)?;
        }
        if !self.substitute_client_id.is_empty() {
            os.write_string(4, &self.substitute_client_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientUpdateProposal {
        ClientUpdateProposal::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "title",
                |m: &ClientUpdateProposal| { &m.title },
                |m: &mut ClientUpdateProposal| { &mut m.title },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "description",
                |m: &ClientUpdateProposal| { &m.description },
                |m: &mut ClientUpdateProposal| { &mut m.description },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "subject_client_id",
                |m: &ClientUpdateProposal| { &m.subject_client_id },
                |m: &mut ClientUpdateProposal| { &mut m.subject_client_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "substitute_client_id",
                |m: &ClientUpdateProposal| { &m.substitute_client_id },
                |m: &mut ClientUpdateProposal| { &mut m.substitute_client_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientUpdateProposal>(
                "ClientUpdateProposal",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClientUpdateProposal {
        static instance: ::protobuf::rt::LazyV2<ClientUpdateProposal> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClientUpdateProposal::new)
    }
}

impl ::protobuf::Clear for ClientUpdateProposal {
    fn clear(&mut self) {
        self.title.clear();
        self.description.clear();
        self.subject_client_id.clear();
        self.substitute_client_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientUpdateProposal {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientUpdateProposal {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpgradeProposal {
    // message fields
    pub title: ::std::string::String,
    pub description: ::std::string::String,
    pub plan: ::protobuf::SingularPtrField<super::upgrade::Plan>,
    pub upgraded_client_state: ::protobuf::SingularPtrField<::protobuf::well_known_types::Any>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpgradeProposal {
    fn default() -> &'a UpgradeProposal {
        <UpgradeProposal as ::protobuf::Message>::default_instance()
    }
}

impl UpgradeProposal {
    pub fn new() -> UpgradeProposal {
        ::std::default::Default::default()
    }

    // string title = 1;


    pub fn get_title(&self) -> &str {
        &self.title
    }
    pub fn clear_title(&mut self) {
        self.title.clear();
    }

    // Param is passed by value, moved
    pub fn set_title(&mut self, v: ::std::string::String) {
        self.title = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_title(&mut self) -> &mut ::std::string::String {
        &mut self.title
    }

    // Take field
    pub fn take_title(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.title, ::std::string::String::new())
    }

    // string description = 2;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }

    // .cosmos.upgrade.v1beta1.Plan plan = 3;


    pub fn get_plan(&self) -> &super::upgrade::Plan {
        self.plan.as_ref().unwrap_or_else(|| <super::upgrade::Plan as ::protobuf::Message>::default_instance())
    }
    pub fn clear_plan(&mut self) {
        self.plan.clear();
    }

    pub fn has_plan(&self) -> bool {
        self.plan.is_some()
    }

    // Param is passed by value, moved
    pub fn set_plan(&mut self, v: super::upgrade::Plan) {
        self.plan = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_plan(&mut self) -> &mut super::upgrade::Plan {
        if self.plan.is_none() {
            self.plan.set_default();
        }
        self.plan.as_mut().unwrap()
    }

    // Take field
    pub fn take_plan(&mut self) -> super::upgrade::Plan {
        self.plan.take().unwrap_or_else(|| super::upgrade::Plan::new())
    }

    // .google.protobuf.Any upgraded_client_state = 4;


    pub fn get_upgraded_client_state(&self) -> &::protobuf::well_known_types::Any {
        self.upgraded_client_state.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Any as ::protobuf::Message>::default_instance())
    }
    pub fn clear_upgraded_client_state(&mut self) {
        self.upgraded_client_state.clear();
    }

    pub fn has_upgraded_client_state(&self) -> bool {
        self.upgraded_client_state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_upgraded_client_state(&mut self, v: ::protobuf::well_known_types::Any) {
        self.upgraded_client_state = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_upgraded_client_state(&mut self) -> &mut ::protobuf::well_known_types::Any {
        if self.upgraded_client_state.is_none() {
            self.upgraded_client_state.set_default();
        }
        self.upgraded_client_state.as_mut().unwrap()
    }

    // Take field
    pub fn take_upgraded_client_state(&mut self) -> ::protobuf::well_known_types::Any {
        self.upgraded_client_state.take().unwrap_or_else(|| ::protobuf::well_known_types::Any::new())
    }
}

impl ::protobuf::Message for UpgradeProposal {
    fn is_initialized(&self) -> bool {
        for v in &self.plan {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.upgraded_client_state {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.title)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.plan)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.upgraded_client_state)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.title.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.title);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.description);
        }
        if let Some(ref v) = self.plan.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.upgraded_client_state.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.title.is_empty() {
            os.write_string(1, &self.title)?;
        }
        if !self.description.is_empty() {
            os.write_string(2, &self.description)?;
        }
        if let Some(ref v) = self.plan.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.upgraded_client_state.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpgradeProposal {
        UpgradeProposal::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "title",
                |m: &UpgradeProposal| { &m.title },
                |m: &mut UpgradeProposal| { &mut m.title },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "description",
                |m: &UpgradeProposal| { &m.description },
                |m: &mut UpgradeProposal| { &mut m.description },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::upgrade::Plan>>(
                "plan",
                |m: &UpgradeProposal| { &m.plan },
                |m: &mut UpgradeProposal| { &mut m.plan },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Any>>(
                "upgraded_client_state",
                |m: &UpgradeProposal| { &m.upgraded_client_state },
                |m: &mut UpgradeProposal| { &mut m.upgraded_client_state },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UpgradeProposal>(
                "UpgradeProposal",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UpgradeProposal {
        static instance: ::protobuf::rt::LazyV2<UpgradeProposal> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UpgradeProposal::new)
    }
}

impl ::protobuf::Clear for UpgradeProposal {
    fn clear(&mut self) {
        self.title.clear();
        self.description.clear();
        self.plan.clear();
        self.upgraded_client_state.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpgradeProposal {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpgradeProposal {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1fibc/core/client/v1/client.proto\x12\x12ibc.core.client.v1\x1a$cosm\
    os/upgrade/v1beta1/upgrade.proto\x1a\x19cosmos_proto/cosmos.proto\x1a\
    \x14gogoproto/gogo.proto\x1a\x19google/protobuf/any.proto\"m\n\x15Identi\
    fiedClientState\x12\x1b\n\tclient_id\x18\x01\x20\x01(\tR\x08clientId\x12\
    7\n\x0cclient_state\x18\x02\x20\x01(\x0b2\x14.google.protobuf.AnyR\x0bcl\
    ientState\"\x93\x01\n\x18ConsensusStateWithHeight\x128\n\x06height\x18\
    \x01\x20\x01(\x0b2\x1a.ibc.core.client.v1.HeightR\x06heightB\x04\xc8\xde\
    \x1f\0\x12=\n\x0fconsensus_state\x18\x02\x20\x01(\x0b2\x14.google.protob\
    uf.AnyR\x0econsensusState\"\x93\x01\n\x15ClientConsensusStates\x12\x1b\n\
    \tclient_id\x18\x01\x20\x01(\tR\x08clientId\x12]\n\x10consensus_states\
    \x18\x02\x20\x03(\x0b2,.ibc.core.client.v1.ConsensusStateWithHeightR\x0f\
    consensusStatesB\x04\xc8\xde\x1f\0\"d\n\x06Height\x12'\n\x0frevision_num\
    ber\x18\x01\x20\x01(\x04R\x0erevisionNumber\x12'\n\x0frevision_height\
    \x18\x02\x20\x01(\x04R\x0erevisionHeight:\x08\x88\xa0\x1f\0\x98\xa0\x1f\
    \0\"1\n\x06Params\x12'\n\x0fallowed_clients\x18\x01\x20\x03(\tR\x0eallow\
    edClients\"\x91\x02\n\x14ClientUpdateProposal\x12\x14\n\x05title\x18\x01\
    \x20\x01(\tR\x05title\x12\x20\n\x0bdescription\x18\x02\x20\x01(\tR\x0bde\
    scription\x12H\n\x11subject_client_id\x18\x03\x20\x01(\tR\x0fsubjectClie\
    ntIdB\x1c\xf2\xde\x1f\x18yaml:\"subject_client_id\"\x12Q\n\x14substitute\
    _client_id\x18\x04\x20\x01(\tR\x12substituteClientIdB\x1f\xf2\xde\x1f\
    \x1byaml:\"substitute_client_id\":$\x18\x01\xca\xb4-\x1acosmos.gov.v1bet\
    a1.Content\x88\xa0\x1f\0\"\x9b\x02\n\x0fUpgradeProposal\x12\x14\n\x05tit\
    le\x18\x01\x20\x01(\tR\x05title\x12\x20\n\x0bdescription\x18\x02\x20\x01\
    (\tR\x0bdescription\x126\n\x04plan\x18\x03\x20\x01(\x0b2\x1c.cosmos.upgr\
    ade.v1beta1.PlanR\x04planB\x04\xc8\xde\x1f\0\x12j\n\x15upgraded_client_s\
    tate\x18\x04\x20\x01(\x0b2\x14.google.protobuf.AnyR\x13upgradedClientSta\
    teB\x20\xf2\xde\x1f\x1cyaml:\"upgraded_client_state\":,\x18\x01\xca\xb4-\
    \x1acosmos.gov.v1beta1.Content\xe8\xa0\x1f\x01\x88\xa0\x1f\0\x98\xa0\x1f\
    \0B:Z8github.com/cosmos/ibc-go/v8/modules/core/02-client/typesb\x06proto\
    3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
