// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `ibc/core/channel/v1/channel_upgrade.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct Upgrade {
    // message fields
    pub fields: ::protobuf::SingularPtrField<UpgradeFields>,
    pub timeout: ::protobuf::SingularPtrField<super::channel::Timeout>,
    pub next_sequence_send: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Upgrade {
    fn default() -> &'a Upgrade {
        <Upgrade as ::protobuf::Message>::default_instance()
    }
}

impl Upgrade {
    pub fn new() -> Upgrade {
        ::std::default::Default::default()
    }

    // .ibc.core.channel.v1.UpgradeFields fields = 1;


    pub fn get_fields(&self) -> &UpgradeFields {
        self.fields.as_ref().unwrap_or_else(|| <UpgradeFields as ::protobuf::Message>::default_instance())
    }
    pub fn clear_fields(&mut self) {
        self.fields.clear();
    }

    pub fn has_fields(&self) -> bool {
        self.fields.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fields(&mut self, v: UpgradeFields) {
        self.fields = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_fields(&mut self) -> &mut UpgradeFields {
        if self.fields.is_none() {
            self.fields.set_default();
        }
        self.fields.as_mut().unwrap()
    }

    // Take field
    pub fn take_fields(&mut self) -> UpgradeFields {
        self.fields.take().unwrap_or_else(|| UpgradeFields::new())
    }

    // .ibc.core.channel.v1.Timeout timeout = 2;


    pub fn get_timeout(&self) -> &super::channel::Timeout {
        self.timeout.as_ref().unwrap_or_else(|| <super::channel::Timeout as ::protobuf::Message>::default_instance())
    }
    pub fn clear_timeout(&mut self) {
        self.timeout.clear();
    }

    pub fn has_timeout(&self) -> bool {
        self.timeout.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timeout(&mut self, v: super::channel::Timeout) {
        self.timeout = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_timeout(&mut self) -> &mut super::channel::Timeout {
        if self.timeout.is_none() {
            self.timeout.set_default();
        }
        self.timeout.as_mut().unwrap()
    }

    // Take field
    pub fn take_timeout(&mut self) -> super::channel::Timeout {
        self.timeout.take().unwrap_or_else(|| super::channel::Timeout::new())
    }

    // uint64 next_sequence_send = 3;


    pub fn get_next_sequence_send(&self) -> u64 {
        self.next_sequence_send
    }
    pub fn clear_next_sequence_send(&mut self) {
        self.next_sequence_send = 0;
    }

    // Param is passed by value, moved
    pub fn set_next_sequence_send(&mut self, v: u64) {
        self.next_sequence_send = v;
    }
}

impl ::protobuf::Message for Upgrade {
    fn is_initialized(&self) -> bool {
        for v in &self.fields {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.timeout {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.fields)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.timeout)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.next_sequence_send = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.fields.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.timeout.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.next_sequence_send != 0 {
            my_size += ::protobuf::rt::value_size(3, self.next_sequence_send, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.fields.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.timeout.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.next_sequence_send != 0 {
            os.write_uint64(3, self.next_sequence_send)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Upgrade {
        Upgrade::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<UpgradeFields>>(
                "fields",
                |m: &Upgrade| { &m.fields },
                |m: &mut Upgrade| { &mut m.fields },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::channel::Timeout>>(
                "timeout",
                |m: &Upgrade| { &m.timeout },
                |m: &mut Upgrade| { &mut m.timeout },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "next_sequence_send",
                |m: &Upgrade| { &m.next_sequence_send },
                |m: &mut Upgrade| { &mut m.next_sequence_send },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Upgrade>(
                "Upgrade",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Upgrade {
        static instance: ::protobuf::rt::LazyV2<Upgrade> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Upgrade::new)
    }
}

impl ::protobuf::Clear for Upgrade {
    fn clear(&mut self) {
        self.fields.clear();
        self.timeout.clear();
        self.next_sequence_send = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Upgrade {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Upgrade {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpgradeFields {
    // message fields
    pub ordering: super::channel::Order,
    pub connection_hops: ::protobuf::RepeatedField<::std::string::String>,
    pub version: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpgradeFields {
    fn default() -> &'a UpgradeFields {
        <UpgradeFields as ::protobuf::Message>::default_instance()
    }
}

impl UpgradeFields {
    pub fn new() -> UpgradeFields {
        ::std::default::Default::default()
    }

    // .ibc.core.channel.v1.Order ordering = 1;


    pub fn get_ordering(&self) -> super::channel::Order {
        self.ordering
    }
    pub fn clear_ordering(&mut self) {
        self.ordering = super::channel::Order::ORDER_NONE_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_ordering(&mut self, v: super::channel::Order) {
        self.ordering = v;
    }

    // repeated string connection_hops = 2;


    pub fn get_connection_hops(&self) -> &[::std::string::String] {
        &self.connection_hops
    }
    pub fn clear_connection_hops(&mut self) {
        self.connection_hops.clear();
    }

    // Param is passed by value, moved
    pub fn set_connection_hops(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.connection_hops = v;
    }

    // Mutable pointer to the field.
    pub fn mut_connection_hops(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.connection_hops
    }

    // Take field
    pub fn take_connection_hops(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.connection_hops, ::protobuf::RepeatedField::new())
    }

    // string version = 3;


    pub fn get_version(&self) -> &str {
        &self.version
    }
    pub fn clear_version(&mut self) {
        self.version.clear();
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: ::std::string::String) {
        self.version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut ::std::string::String {
        &mut self.version
    }

    // Take field
    pub fn take_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.version, ::std::string::String::new())
    }
}

impl ::protobuf::Message for UpgradeFields {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.ordering, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.connection_hops)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.version)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.ordering != super::channel::Order::ORDER_NONE_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(1, self.ordering);
        }
        for value in &self.connection_hops {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        if !self.version.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.version);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.ordering != super::channel::Order::ORDER_NONE_UNSPECIFIED {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.ordering))?;
        }
        for v in &self.connection_hops {
            os.write_string(2, &v)?;
        };
        if !self.version.is_empty() {
            os.write_string(3, &self.version)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpgradeFields {
        UpgradeFields::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::channel::Order>>(
                "ordering",
                |m: &UpgradeFields| { &m.ordering },
                |m: &mut UpgradeFields| { &mut m.ordering },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "connection_hops",
                |m: &UpgradeFields| { &m.connection_hops },
                |m: &mut UpgradeFields| { &mut m.connection_hops },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "version",
                |m: &UpgradeFields| { &m.version },
                |m: &mut UpgradeFields| { &mut m.version },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UpgradeFields>(
                "UpgradeFields",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UpgradeFields {
        static instance: ::protobuf::rt::LazyV2<UpgradeFields> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UpgradeFields::new)
    }
}

impl ::protobuf::Clear for UpgradeFields {
    fn clear(&mut self) {
        self.ordering = super::channel::Order::ORDER_NONE_UNSPECIFIED;
        self.connection_hops.clear();
        self.version.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpgradeFields {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpgradeFields {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ErrorReceipt {
    // message fields
    pub sequence: u64,
    pub message: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ErrorReceipt {
    fn default() -> &'a ErrorReceipt {
        <ErrorReceipt as ::protobuf::Message>::default_instance()
    }
}

impl ErrorReceipt {
    pub fn new() -> ErrorReceipt {
        ::std::default::Default::default()
    }

    // uint64 sequence = 1;


    pub fn get_sequence(&self) -> u64 {
        self.sequence
    }
    pub fn clear_sequence(&mut self) {
        self.sequence = 0;
    }

    // Param is passed by value, moved
    pub fn set_sequence(&mut self, v: u64) {
        self.sequence = v;
    }

    // string message = 2;


    pub fn get_message(&self) -> &str {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ErrorReceipt {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.sequence = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.sequence != 0 {
            my_size += ::protobuf::rt::value_size(1, self.sequence, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.sequence != 0 {
            os.write_uint64(1, self.sequence)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ErrorReceipt {
        ErrorReceipt::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "sequence",
                |m: &ErrorReceipt| { &m.sequence },
                |m: &mut ErrorReceipt| { &mut m.sequence },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "message",
                |m: &ErrorReceipt| { &m.message },
                |m: &mut ErrorReceipt| { &mut m.message },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ErrorReceipt>(
                "ErrorReceipt",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ErrorReceipt {
        static instance: ::protobuf::rt::LazyV2<ErrorReceipt> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ErrorReceipt::new)
    }
}

impl ::protobuf::Clear for ErrorReceipt {
    fn clear(&mut self) {
        self.sequence = 0;
        self.message.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ErrorReceipt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ErrorReceipt {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n)ibc/core/channel/v1/channel_upgrade.proto\x12\x13ibc.core.channel.v1\
    \x1a\x14gogoproto/gogo.proto\x1a!ibc/core/channel/v1/channel.proto\"\xbd\
    \x01\n\x07Upgrade\x12@\n\x06fields\x18\x01\x20\x01(\x0b2\".ibc.core.chan\
    nel.v1.UpgradeFieldsR\x06fieldsB\x04\xc8\xde\x1f\0\x12<\n\x07timeout\x18\
    \x02\x20\x01(\x0b2\x1c.ibc.core.channel.v1.TimeoutR\x07timeoutB\x04\xc8\
    \xde\x1f\0\x12,\n\x12next_sequence_send\x18\x03\x20\x01(\x04R\x10nextSeq\
    uenceSend:\x04\x88\xa0\x1f\0\"\x90\x01\n\rUpgradeFields\x126\n\x08orderi\
    ng\x18\x01\x20\x01(\x0e2\x1a.ibc.core.channel.v1.OrderR\x08ordering\x12'\
    \n\x0fconnection_hops\x18\x02\x20\x03(\tR\x0econnectionHops\x12\x18\n\
    \x07version\x18\x03\x20\x01(\tR\x07version:\x04\x88\xa0\x1f\0\"J\n\x0cEr\
    rorReceipt\x12\x1a\n\x08sequence\x18\x01\x20\x01(\x04R\x08sequence\x12\
    \x18\n\x07message\x18\x02\x20\x01(\tR\x07message:\x04\x88\xa0\x1f\0B;Z9g\
    ithub.com/cosmos/ibc-go/v8/modules/core/04-channel/typesb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
