// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `cosmos/tx/v1beta1/tx.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct Tx {
    // message fields
    pub body: ::protobuf::SingularPtrField<TxBody>,
    pub auth_info: ::protobuf::SingularPtrField<AuthInfo>,
    pub signatures: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Tx {
    fn default() -> &'a Tx {
        <Tx as ::protobuf::Message>::default_instance()
    }
}

impl Tx {
    pub fn new() -> Tx {
        ::std::default::Default::default()
    }

    // .cosmos.tx.v1beta1.TxBody body = 1;


    pub fn get_body(&self) -> &TxBody {
        self.body.as_ref().unwrap_or_else(|| <TxBody as ::protobuf::Message>::default_instance())
    }
    pub fn clear_body(&mut self) {
        self.body.clear();
    }

    pub fn has_body(&self) -> bool {
        self.body.is_some()
    }

    // Param is passed by value, moved
    pub fn set_body(&mut self, v: TxBody) {
        self.body = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_body(&mut self) -> &mut TxBody {
        if self.body.is_none() {
            self.body.set_default();
        }
        self.body.as_mut().unwrap()
    }

    // Take field
    pub fn take_body(&mut self) -> TxBody {
        self.body.take().unwrap_or_else(|| TxBody::new())
    }

    // .cosmos.tx.v1beta1.AuthInfo auth_info = 2;


    pub fn get_auth_info(&self) -> &AuthInfo {
        self.auth_info.as_ref().unwrap_or_else(|| <AuthInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_auth_info(&mut self) {
        self.auth_info.clear();
    }

    pub fn has_auth_info(&self) -> bool {
        self.auth_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_auth_info(&mut self, v: AuthInfo) {
        self.auth_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_auth_info(&mut self) -> &mut AuthInfo {
        if self.auth_info.is_none() {
            self.auth_info.set_default();
        }
        self.auth_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_auth_info(&mut self) -> AuthInfo {
        self.auth_info.take().unwrap_or_else(|| AuthInfo::new())
    }

    // repeated bytes signatures = 3;


    pub fn get_signatures(&self) -> &[::std::vec::Vec<u8>] {
        &self.signatures
    }
    pub fn clear_signatures(&mut self) {
        self.signatures.clear();
    }

    // Param is passed by value, moved
    pub fn set_signatures(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.signatures = v;
    }

    // Mutable pointer to the field.
    pub fn mut_signatures(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.signatures
    }

    // Take field
    pub fn take_signatures(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.signatures, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Tx {
    fn is_initialized(&self) -> bool {
        for v in &self.body {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.auth_info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.body)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.auth_info)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.signatures)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.body.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.auth_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.signatures {
            my_size += ::protobuf::rt::bytes_size(3, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.body.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.auth_info.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.signatures {
            os.write_bytes(3, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Tx {
        Tx::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TxBody>>(
                "body",
                |m: &Tx| { &m.body },
                |m: &mut Tx| { &mut m.body },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AuthInfo>>(
                "auth_info",
                |m: &Tx| { &m.auth_info },
                |m: &mut Tx| { &mut m.auth_info },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "signatures",
                |m: &Tx| { &m.signatures },
                |m: &mut Tx| { &mut m.signatures },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Tx>(
                "Tx",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Tx {
        static instance: ::protobuf::rt::LazyV2<Tx> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Tx::new)
    }
}

impl ::protobuf::Clear for Tx {
    fn clear(&mut self) {
        self.body.clear();
        self.auth_info.clear();
        self.signatures.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Tx {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Tx {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TxRaw {
    // message fields
    pub body_bytes: ::std::vec::Vec<u8>,
    pub auth_info_bytes: ::std::vec::Vec<u8>,
    pub signatures: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TxRaw {
    fn default() -> &'a TxRaw {
        <TxRaw as ::protobuf::Message>::default_instance()
    }
}

impl TxRaw {
    pub fn new() -> TxRaw {
        ::std::default::Default::default()
    }

    // bytes body_bytes = 1;


    pub fn get_body_bytes(&self) -> &[u8] {
        &self.body_bytes
    }
    pub fn clear_body_bytes(&mut self) {
        self.body_bytes.clear();
    }

    // Param is passed by value, moved
    pub fn set_body_bytes(&mut self, v: ::std::vec::Vec<u8>) {
        self.body_bytes = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_body_bytes(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.body_bytes
    }

    // Take field
    pub fn take_body_bytes(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.body_bytes, ::std::vec::Vec::new())
    }

    // bytes auth_info_bytes = 2;


    pub fn get_auth_info_bytes(&self) -> &[u8] {
        &self.auth_info_bytes
    }
    pub fn clear_auth_info_bytes(&mut self) {
        self.auth_info_bytes.clear();
    }

    // Param is passed by value, moved
    pub fn set_auth_info_bytes(&mut self, v: ::std::vec::Vec<u8>) {
        self.auth_info_bytes = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_auth_info_bytes(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.auth_info_bytes
    }

    // Take field
    pub fn take_auth_info_bytes(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.auth_info_bytes, ::std::vec::Vec::new())
    }

    // repeated bytes signatures = 3;


    pub fn get_signatures(&self) -> &[::std::vec::Vec<u8>] {
        &self.signatures
    }
    pub fn clear_signatures(&mut self) {
        self.signatures.clear();
    }

    // Param is passed by value, moved
    pub fn set_signatures(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.signatures = v;
    }

    // Mutable pointer to the field.
    pub fn mut_signatures(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.signatures
    }

    // Take field
    pub fn take_signatures(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.signatures, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for TxRaw {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.body_bytes)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.auth_info_bytes)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.signatures)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.body_bytes.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.body_bytes);
        }
        if !self.auth_info_bytes.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.auth_info_bytes);
        }
        for value in &self.signatures {
            my_size += ::protobuf::rt::bytes_size(3, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.body_bytes.is_empty() {
            os.write_bytes(1, &self.body_bytes)?;
        }
        if !self.auth_info_bytes.is_empty() {
            os.write_bytes(2, &self.auth_info_bytes)?;
        }
        for v in &self.signatures {
            os.write_bytes(3, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TxRaw {
        TxRaw::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "body_bytes",
                |m: &TxRaw| { &m.body_bytes },
                |m: &mut TxRaw| { &mut m.body_bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "auth_info_bytes",
                |m: &TxRaw| { &m.auth_info_bytes },
                |m: &mut TxRaw| { &mut m.auth_info_bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "signatures",
                |m: &TxRaw| { &m.signatures },
                |m: &mut TxRaw| { &mut m.signatures },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TxRaw>(
                "TxRaw",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TxRaw {
        static instance: ::protobuf::rt::LazyV2<TxRaw> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TxRaw::new)
    }
}

impl ::protobuf::Clear for TxRaw {
    fn clear(&mut self) {
        self.body_bytes.clear();
        self.auth_info_bytes.clear();
        self.signatures.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TxRaw {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TxRaw {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SignDoc {
    // message fields
    pub body_bytes: ::std::vec::Vec<u8>,
    pub auth_info_bytes: ::std::vec::Vec<u8>,
    pub chain_id: ::std::string::String,
    pub account_number: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SignDoc {
    fn default() -> &'a SignDoc {
        <SignDoc as ::protobuf::Message>::default_instance()
    }
}

impl SignDoc {
    pub fn new() -> SignDoc {
        ::std::default::Default::default()
    }

    // bytes body_bytes = 1;


    pub fn get_body_bytes(&self) -> &[u8] {
        &self.body_bytes
    }
    pub fn clear_body_bytes(&mut self) {
        self.body_bytes.clear();
    }

    // Param is passed by value, moved
    pub fn set_body_bytes(&mut self, v: ::std::vec::Vec<u8>) {
        self.body_bytes = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_body_bytes(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.body_bytes
    }

    // Take field
    pub fn take_body_bytes(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.body_bytes, ::std::vec::Vec::new())
    }

    // bytes auth_info_bytes = 2;


    pub fn get_auth_info_bytes(&self) -> &[u8] {
        &self.auth_info_bytes
    }
    pub fn clear_auth_info_bytes(&mut self) {
        self.auth_info_bytes.clear();
    }

    // Param is passed by value, moved
    pub fn set_auth_info_bytes(&mut self, v: ::std::vec::Vec<u8>) {
        self.auth_info_bytes = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_auth_info_bytes(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.auth_info_bytes
    }

    // Take field
    pub fn take_auth_info_bytes(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.auth_info_bytes, ::std::vec::Vec::new())
    }

    // string chain_id = 3;


    pub fn get_chain_id(&self) -> &str {
        &self.chain_id
    }
    pub fn clear_chain_id(&mut self) {
        self.chain_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_chain_id(&mut self, v: ::std::string::String) {
        self.chain_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_chain_id(&mut self) -> &mut ::std::string::String {
        &mut self.chain_id
    }

    // Take field
    pub fn take_chain_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.chain_id, ::std::string::String::new())
    }

    // uint64 account_number = 4;


    pub fn get_account_number(&self) -> u64 {
        self.account_number
    }
    pub fn clear_account_number(&mut self) {
        self.account_number = 0;
    }

    // Param is passed by value, moved
    pub fn set_account_number(&mut self, v: u64) {
        self.account_number = v;
    }
}

impl ::protobuf::Message for SignDoc {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.body_bytes)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.auth_info_bytes)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.chain_id)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.account_number = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.body_bytes.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.body_bytes);
        }
        if !self.auth_info_bytes.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.auth_info_bytes);
        }
        if !self.chain_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.chain_id);
        }
        if self.account_number != 0 {
            my_size += ::protobuf::rt::value_size(4, self.account_number, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.body_bytes.is_empty() {
            os.write_bytes(1, &self.body_bytes)?;
        }
        if !self.auth_info_bytes.is_empty() {
            os.write_bytes(2, &self.auth_info_bytes)?;
        }
        if !self.chain_id.is_empty() {
            os.write_string(3, &self.chain_id)?;
        }
        if self.account_number != 0 {
            os.write_uint64(4, self.account_number)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SignDoc {
        SignDoc::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "body_bytes",
                |m: &SignDoc| { &m.body_bytes },
                |m: &mut SignDoc| { &mut m.body_bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "auth_info_bytes",
                |m: &SignDoc| { &m.auth_info_bytes },
                |m: &mut SignDoc| { &mut m.auth_info_bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "chain_id",
                |m: &SignDoc| { &m.chain_id },
                |m: &mut SignDoc| { &mut m.chain_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "account_number",
                |m: &SignDoc| { &m.account_number },
                |m: &mut SignDoc| { &mut m.account_number },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SignDoc>(
                "SignDoc",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SignDoc {
        static instance: ::protobuf::rt::LazyV2<SignDoc> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SignDoc::new)
    }
}

impl ::protobuf::Clear for SignDoc {
    fn clear(&mut self) {
        self.body_bytes.clear();
        self.auth_info_bytes.clear();
        self.chain_id.clear();
        self.account_number = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SignDoc {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SignDoc {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SignDocDirectAux {
    // message fields
    pub body_bytes: ::std::vec::Vec<u8>,
    pub public_key: ::protobuf::SingularPtrField<::protobuf::well_known_types::Any>,
    pub chain_id: ::std::string::String,
    pub account_number: u64,
    pub sequence: u64,
    pub tip: ::protobuf::SingularPtrField<Tip>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SignDocDirectAux {
    fn default() -> &'a SignDocDirectAux {
        <SignDocDirectAux as ::protobuf::Message>::default_instance()
    }
}

impl SignDocDirectAux {
    pub fn new() -> SignDocDirectAux {
        ::std::default::Default::default()
    }

    // bytes body_bytes = 1;


    pub fn get_body_bytes(&self) -> &[u8] {
        &self.body_bytes
    }
    pub fn clear_body_bytes(&mut self) {
        self.body_bytes.clear();
    }

    // Param is passed by value, moved
    pub fn set_body_bytes(&mut self, v: ::std::vec::Vec<u8>) {
        self.body_bytes = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_body_bytes(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.body_bytes
    }

    // Take field
    pub fn take_body_bytes(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.body_bytes, ::std::vec::Vec::new())
    }

    // .google.protobuf.Any public_key = 2;


    pub fn get_public_key(&self) -> &::protobuf::well_known_types::Any {
        self.public_key.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Any as ::protobuf::Message>::default_instance())
    }
    pub fn clear_public_key(&mut self) {
        self.public_key.clear();
    }

    pub fn has_public_key(&self) -> bool {
        self.public_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_public_key(&mut self, v: ::protobuf::well_known_types::Any) {
        self.public_key = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_public_key(&mut self) -> &mut ::protobuf::well_known_types::Any {
        if self.public_key.is_none() {
            self.public_key.set_default();
        }
        self.public_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_public_key(&mut self) -> ::protobuf::well_known_types::Any {
        self.public_key.take().unwrap_or_else(|| ::protobuf::well_known_types::Any::new())
    }

    // string chain_id = 3;


    pub fn get_chain_id(&self) -> &str {
        &self.chain_id
    }
    pub fn clear_chain_id(&mut self) {
        self.chain_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_chain_id(&mut self, v: ::std::string::String) {
        self.chain_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_chain_id(&mut self) -> &mut ::std::string::String {
        &mut self.chain_id
    }

    // Take field
    pub fn take_chain_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.chain_id, ::std::string::String::new())
    }

    // uint64 account_number = 4;


    pub fn get_account_number(&self) -> u64 {
        self.account_number
    }
    pub fn clear_account_number(&mut self) {
        self.account_number = 0;
    }

    // Param is passed by value, moved
    pub fn set_account_number(&mut self, v: u64) {
        self.account_number = v;
    }

    // uint64 sequence = 5;


    pub fn get_sequence(&self) -> u64 {
        self.sequence
    }
    pub fn clear_sequence(&mut self) {
        self.sequence = 0;
    }

    // Param is passed by value, moved
    pub fn set_sequence(&mut self, v: u64) {
        self.sequence = v;
    }

    // .cosmos.tx.v1beta1.Tip tip = 6;


    pub fn get_tip(&self) -> &Tip {
        self.tip.as_ref().unwrap_or_else(|| <Tip as ::protobuf::Message>::default_instance())
    }
    pub fn clear_tip(&mut self) {
        self.tip.clear();
    }

    pub fn has_tip(&self) -> bool {
        self.tip.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tip(&mut self, v: Tip) {
        self.tip = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tip(&mut self) -> &mut Tip {
        if self.tip.is_none() {
            self.tip.set_default();
        }
        self.tip.as_mut().unwrap()
    }

    // Take field
    pub fn take_tip(&mut self) -> Tip {
        self.tip.take().unwrap_or_else(|| Tip::new())
    }
}

impl ::protobuf::Message for SignDocDirectAux {
    fn is_initialized(&self) -> bool {
        for v in &self.public_key {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.tip {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.body_bytes)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.public_key)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.chain_id)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.account_number = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.sequence = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tip)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.body_bytes.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.body_bytes);
        }
        if let Some(ref v) = self.public_key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.chain_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.chain_id);
        }
        if self.account_number != 0 {
            my_size += ::protobuf::rt::value_size(4, self.account_number, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.sequence != 0 {
            my_size += ::protobuf::rt::value_size(5, self.sequence, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.tip.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.body_bytes.is_empty() {
            os.write_bytes(1, &self.body_bytes)?;
        }
        if let Some(ref v) = self.public_key.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.chain_id.is_empty() {
            os.write_string(3, &self.chain_id)?;
        }
        if self.account_number != 0 {
            os.write_uint64(4, self.account_number)?;
        }
        if self.sequence != 0 {
            os.write_uint64(5, self.sequence)?;
        }
        if let Some(ref v) = self.tip.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SignDocDirectAux {
        SignDocDirectAux::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "body_bytes",
                |m: &SignDocDirectAux| { &m.body_bytes },
                |m: &mut SignDocDirectAux| { &mut m.body_bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Any>>(
                "public_key",
                |m: &SignDocDirectAux| { &m.public_key },
                |m: &mut SignDocDirectAux| { &mut m.public_key },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "chain_id",
                |m: &SignDocDirectAux| { &m.chain_id },
                |m: &mut SignDocDirectAux| { &mut m.chain_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "account_number",
                |m: &SignDocDirectAux| { &m.account_number },
                |m: &mut SignDocDirectAux| { &mut m.account_number },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "sequence",
                |m: &SignDocDirectAux| { &m.sequence },
                |m: &mut SignDocDirectAux| { &mut m.sequence },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Tip>>(
                "tip",
                |m: &SignDocDirectAux| { &m.tip },
                |m: &mut SignDocDirectAux| { &mut m.tip },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SignDocDirectAux>(
                "SignDocDirectAux",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SignDocDirectAux {
        static instance: ::protobuf::rt::LazyV2<SignDocDirectAux> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SignDocDirectAux::new)
    }
}

impl ::protobuf::Clear for SignDocDirectAux {
    fn clear(&mut self) {
        self.body_bytes.clear();
        self.public_key.clear();
        self.chain_id.clear();
        self.account_number = 0;
        self.sequence = 0;
        self.tip.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SignDocDirectAux {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SignDocDirectAux {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TxBody {
    // message fields
    pub messages: ::protobuf::RepeatedField<::protobuf::well_known_types::Any>,
    pub memo: ::std::string::String,
    pub timeout_height: u64,
    pub extension_options: ::protobuf::RepeatedField<::protobuf::well_known_types::Any>,
    pub non_critical_extension_options: ::protobuf::RepeatedField<::protobuf::well_known_types::Any>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TxBody {
    fn default() -> &'a TxBody {
        <TxBody as ::protobuf::Message>::default_instance()
    }
}

impl TxBody {
    pub fn new() -> TxBody {
        ::std::default::Default::default()
    }

    // repeated .google.protobuf.Any messages = 1;


    pub fn get_messages(&self) -> &[::protobuf::well_known_types::Any] {
        &self.messages
    }
    pub fn clear_messages(&mut self) {
        self.messages.clear();
    }

    // Param is passed by value, moved
    pub fn set_messages(&mut self, v: ::protobuf::RepeatedField<::protobuf::well_known_types::Any>) {
        self.messages = v;
    }

    // Mutable pointer to the field.
    pub fn mut_messages(&mut self) -> &mut ::protobuf::RepeatedField<::protobuf::well_known_types::Any> {
        &mut self.messages
    }

    // Take field
    pub fn take_messages(&mut self) -> ::protobuf::RepeatedField<::protobuf::well_known_types::Any> {
        ::std::mem::replace(&mut self.messages, ::protobuf::RepeatedField::new())
    }

    // string memo = 2;


    pub fn get_memo(&self) -> &str {
        &self.memo
    }
    pub fn clear_memo(&mut self) {
        self.memo.clear();
    }

    // Param is passed by value, moved
    pub fn set_memo(&mut self, v: ::std::string::String) {
        self.memo = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_memo(&mut self) -> &mut ::std::string::String {
        &mut self.memo
    }

    // Take field
    pub fn take_memo(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.memo, ::std::string::String::new())
    }

    // uint64 timeout_height = 3;


    pub fn get_timeout_height(&self) -> u64 {
        self.timeout_height
    }
    pub fn clear_timeout_height(&mut self) {
        self.timeout_height = 0;
    }

    // Param is passed by value, moved
    pub fn set_timeout_height(&mut self, v: u64) {
        self.timeout_height = v;
    }

    // repeated .google.protobuf.Any extension_options = 1023;


    pub fn get_extension_options(&self) -> &[::protobuf::well_known_types::Any] {
        &self.extension_options
    }
    pub fn clear_extension_options(&mut self) {
        self.extension_options.clear();
    }

    // Param is passed by value, moved
    pub fn set_extension_options(&mut self, v: ::protobuf::RepeatedField<::protobuf::well_known_types::Any>) {
        self.extension_options = v;
    }

    // Mutable pointer to the field.
    pub fn mut_extension_options(&mut self) -> &mut ::protobuf::RepeatedField<::protobuf::well_known_types::Any> {
        &mut self.extension_options
    }

    // Take field
    pub fn take_extension_options(&mut self) -> ::protobuf::RepeatedField<::protobuf::well_known_types::Any> {
        ::std::mem::replace(&mut self.extension_options, ::protobuf::RepeatedField::new())
    }

    // repeated .google.protobuf.Any non_critical_extension_options = 2047;


    pub fn get_non_critical_extension_options(&self) -> &[::protobuf::well_known_types::Any] {
        &self.non_critical_extension_options
    }
    pub fn clear_non_critical_extension_options(&mut self) {
        self.non_critical_extension_options.clear();
    }

    // Param is passed by value, moved
    pub fn set_non_critical_extension_options(&mut self, v: ::protobuf::RepeatedField<::protobuf::well_known_types::Any>) {
        self.non_critical_extension_options = v;
    }

    // Mutable pointer to the field.
    pub fn mut_non_critical_extension_options(&mut self) -> &mut ::protobuf::RepeatedField<::protobuf::well_known_types::Any> {
        &mut self.non_critical_extension_options
    }

    // Take field
    pub fn take_non_critical_extension_options(&mut self) -> ::protobuf::RepeatedField<::protobuf::well_known_types::Any> {
        ::std::mem::replace(&mut self.non_critical_extension_options, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for TxBody {
    fn is_initialized(&self) -> bool {
        for v in &self.messages {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.extension_options {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.non_critical_extension_options {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.messages)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.memo)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timeout_height = tmp;
                },
                1023 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.extension_options)?;
                },
                2047 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.non_critical_extension_options)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.messages {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.memo.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.memo);
        }
        if self.timeout_height != 0 {
            my_size += ::protobuf::rt::value_size(3, self.timeout_height, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.extension_options {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.non_critical_extension_options {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.messages {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.memo.is_empty() {
            os.write_string(2, &self.memo)?;
        }
        if self.timeout_height != 0 {
            os.write_uint64(3, self.timeout_height)?;
        }
        for v in &self.extension_options {
            os.write_tag(1023, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.non_critical_extension_options {
            os.write_tag(2047, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TxBody {
        TxBody::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Any>>(
                "messages",
                |m: &TxBody| { &m.messages },
                |m: &mut TxBody| { &mut m.messages },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "memo",
                |m: &TxBody| { &m.memo },
                |m: &mut TxBody| { &mut m.memo },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "timeout_height",
                |m: &TxBody| { &m.timeout_height },
                |m: &mut TxBody| { &mut m.timeout_height },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Any>>(
                "extension_options",
                |m: &TxBody| { &m.extension_options },
                |m: &mut TxBody| { &mut m.extension_options },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Any>>(
                "non_critical_extension_options",
                |m: &TxBody| { &m.non_critical_extension_options },
                |m: &mut TxBody| { &mut m.non_critical_extension_options },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TxBody>(
                "TxBody",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TxBody {
        static instance: ::protobuf::rt::LazyV2<TxBody> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TxBody::new)
    }
}

impl ::protobuf::Clear for TxBody {
    fn clear(&mut self) {
        self.messages.clear();
        self.memo.clear();
        self.timeout_height = 0;
        self.extension_options.clear();
        self.non_critical_extension_options.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TxBody {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TxBody {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AuthInfo {
    // message fields
    pub signer_infos: ::protobuf::RepeatedField<SignerInfo>,
    pub fee: ::protobuf::SingularPtrField<Fee>,
    pub tip: ::protobuf::SingularPtrField<Tip>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AuthInfo {
    fn default() -> &'a AuthInfo {
        <AuthInfo as ::protobuf::Message>::default_instance()
    }
}

impl AuthInfo {
    pub fn new() -> AuthInfo {
        ::std::default::Default::default()
    }

    // repeated .cosmos.tx.v1beta1.SignerInfo signer_infos = 1;


    pub fn get_signer_infos(&self) -> &[SignerInfo] {
        &self.signer_infos
    }
    pub fn clear_signer_infos(&mut self) {
        self.signer_infos.clear();
    }

    // Param is passed by value, moved
    pub fn set_signer_infos(&mut self, v: ::protobuf::RepeatedField<SignerInfo>) {
        self.signer_infos = v;
    }

    // Mutable pointer to the field.
    pub fn mut_signer_infos(&mut self) -> &mut ::protobuf::RepeatedField<SignerInfo> {
        &mut self.signer_infos
    }

    // Take field
    pub fn take_signer_infos(&mut self) -> ::protobuf::RepeatedField<SignerInfo> {
        ::std::mem::replace(&mut self.signer_infos, ::protobuf::RepeatedField::new())
    }

    // .cosmos.tx.v1beta1.Fee fee = 2;


    pub fn get_fee(&self) -> &Fee {
        self.fee.as_ref().unwrap_or_else(|| <Fee as ::protobuf::Message>::default_instance())
    }
    pub fn clear_fee(&mut self) {
        self.fee.clear();
    }

    pub fn has_fee(&self) -> bool {
        self.fee.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fee(&mut self, v: Fee) {
        self.fee = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_fee(&mut self) -> &mut Fee {
        if self.fee.is_none() {
            self.fee.set_default();
        }
        self.fee.as_mut().unwrap()
    }

    // Take field
    pub fn take_fee(&mut self) -> Fee {
        self.fee.take().unwrap_or_else(|| Fee::new())
    }

    // .cosmos.tx.v1beta1.Tip tip = 3;


    pub fn get_tip(&self) -> &Tip {
        self.tip.as_ref().unwrap_or_else(|| <Tip as ::protobuf::Message>::default_instance())
    }
    pub fn clear_tip(&mut self) {
        self.tip.clear();
    }

    pub fn has_tip(&self) -> bool {
        self.tip.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tip(&mut self, v: Tip) {
        self.tip = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tip(&mut self) -> &mut Tip {
        if self.tip.is_none() {
            self.tip.set_default();
        }
        self.tip.as_mut().unwrap()
    }

    // Take field
    pub fn take_tip(&mut self) -> Tip {
        self.tip.take().unwrap_or_else(|| Tip::new())
    }
}

impl ::protobuf::Message for AuthInfo {
    fn is_initialized(&self) -> bool {
        for v in &self.signer_infos {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.fee {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.tip {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.signer_infos)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.fee)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tip)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.signer_infos {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.fee.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.tip.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.signer_infos {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.fee.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.tip.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AuthInfo {
        AuthInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SignerInfo>>(
                "signer_infos",
                |m: &AuthInfo| { &m.signer_infos },
                |m: &mut AuthInfo| { &mut m.signer_infos },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Fee>>(
                "fee",
                |m: &AuthInfo| { &m.fee },
                |m: &mut AuthInfo| { &mut m.fee },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Tip>>(
                "tip",
                |m: &AuthInfo| { &m.tip },
                |m: &mut AuthInfo| { &mut m.tip },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AuthInfo>(
                "AuthInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AuthInfo {
        static instance: ::protobuf::rt::LazyV2<AuthInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AuthInfo::new)
    }
}

impl ::protobuf::Clear for AuthInfo {
    fn clear(&mut self) {
        self.signer_infos.clear();
        self.fee.clear();
        self.tip.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AuthInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AuthInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SignerInfo {
    // message fields
    pub public_key: ::protobuf::SingularPtrField<::protobuf::well_known_types::Any>,
    pub mode_info: ::protobuf::SingularPtrField<ModeInfo>,
    pub sequence: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SignerInfo {
    fn default() -> &'a SignerInfo {
        <SignerInfo as ::protobuf::Message>::default_instance()
    }
}

impl SignerInfo {
    pub fn new() -> SignerInfo {
        ::std::default::Default::default()
    }

    // .google.protobuf.Any public_key = 1;


    pub fn get_public_key(&self) -> &::protobuf::well_known_types::Any {
        self.public_key.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Any as ::protobuf::Message>::default_instance())
    }
    pub fn clear_public_key(&mut self) {
        self.public_key.clear();
    }

    pub fn has_public_key(&self) -> bool {
        self.public_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_public_key(&mut self, v: ::protobuf::well_known_types::Any) {
        self.public_key = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_public_key(&mut self) -> &mut ::protobuf::well_known_types::Any {
        if self.public_key.is_none() {
            self.public_key.set_default();
        }
        self.public_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_public_key(&mut self) -> ::protobuf::well_known_types::Any {
        self.public_key.take().unwrap_or_else(|| ::protobuf::well_known_types::Any::new())
    }

    // .cosmos.tx.v1beta1.ModeInfo mode_info = 2;


    pub fn get_mode_info(&self) -> &ModeInfo {
        self.mode_info.as_ref().unwrap_or_else(|| <ModeInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_mode_info(&mut self) {
        self.mode_info.clear();
    }

    pub fn has_mode_info(&self) -> bool {
        self.mode_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mode_info(&mut self, v: ModeInfo) {
        self.mode_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mode_info(&mut self) -> &mut ModeInfo {
        if self.mode_info.is_none() {
            self.mode_info.set_default();
        }
        self.mode_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_mode_info(&mut self) -> ModeInfo {
        self.mode_info.take().unwrap_or_else(|| ModeInfo::new())
    }

    // uint64 sequence = 3;


    pub fn get_sequence(&self) -> u64 {
        self.sequence
    }
    pub fn clear_sequence(&mut self) {
        self.sequence = 0;
    }

    // Param is passed by value, moved
    pub fn set_sequence(&mut self, v: u64) {
        self.sequence = v;
    }
}

impl ::protobuf::Message for SignerInfo {
    fn is_initialized(&self) -> bool {
        for v in &self.public_key {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.mode_info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.public_key)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.mode_info)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.sequence = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.public_key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.mode_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.sequence != 0 {
            my_size += ::protobuf::rt::value_size(3, self.sequence, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.public_key.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.mode_info.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.sequence != 0 {
            os.write_uint64(3, self.sequence)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SignerInfo {
        SignerInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Any>>(
                "public_key",
                |m: &SignerInfo| { &m.public_key },
                |m: &mut SignerInfo| { &mut m.public_key },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ModeInfo>>(
                "mode_info",
                |m: &SignerInfo| { &m.mode_info },
                |m: &mut SignerInfo| { &mut m.mode_info },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "sequence",
                |m: &SignerInfo| { &m.sequence },
                |m: &mut SignerInfo| { &mut m.sequence },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SignerInfo>(
                "SignerInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SignerInfo {
        static instance: ::protobuf::rt::LazyV2<SignerInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SignerInfo::new)
    }
}

impl ::protobuf::Clear for SignerInfo {
    fn clear(&mut self) {
        self.public_key.clear();
        self.mode_info.clear();
        self.sequence = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SignerInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SignerInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ModeInfo {
    // message oneof groups
    pub sum: ::std::option::Option<ModeInfo_oneof_sum>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ModeInfo {
    fn default() -> &'a ModeInfo {
        <ModeInfo as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum ModeInfo_oneof_sum {
    single(ModeInfo_Single),
    multi(ModeInfo_Multi),
}

impl ModeInfo {
    pub fn new() -> ModeInfo {
        ::std::default::Default::default()
    }

    // .cosmos.tx.v1beta1.ModeInfo.Single single = 1;


    pub fn get_single(&self) -> &ModeInfo_Single {
        match self.sum {
            ::std::option::Option::Some(ModeInfo_oneof_sum::single(ref v)) => v,
            _ => <ModeInfo_Single as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_single(&mut self) {
        self.sum = ::std::option::Option::None;
    }

    pub fn has_single(&self) -> bool {
        match self.sum {
            ::std::option::Option::Some(ModeInfo_oneof_sum::single(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_single(&mut self, v: ModeInfo_Single) {
        self.sum = ::std::option::Option::Some(ModeInfo_oneof_sum::single(v))
    }

    // Mutable pointer to the field.
    pub fn mut_single(&mut self) -> &mut ModeInfo_Single {
        if let ::std::option::Option::Some(ModeInfo_oneof_sum::single(_)) = self.sum {
        } else {
            self.sum = ::std::option::Option::Some(ModeInfo_oneof_sum::single(ModeInfo_Single::new()));
        }
        match self.sum {
            ::std::option::Option::Some(ModeInfo_oneof_sum::single(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_single(&mut self) -> ModeInfo_Single {
        if self.has_single() {
            match self.sum.take() {
                ::std::option::Option::Some(ModeInfo_oneof_sum::single(v)) => v,
                _ => panic!(),
            }
        } else {
            ModeInfo_Single::new()
        }
    }

    // .cosmos.tx.v1beta1.ModeInfo.Multi multi = 2;


    pub fn get_multi(&self) -> &ModeInfo_Multi {
        match self.sum {
            ::std::option::Option::Some(ModeInfo_oneof_sum::multi(ref v)) => v,
            _ => <ModeInfo_Multi as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_multi(&mut self) {
        self.sum = ::std::option::Option::None;
    }

    pub fn has_multi(&self) -> bool {
        match self.sum {
            ::std::option::Option::Some(ModeInfo_oneof_sum::multi(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_multi(&mut self, v: ModeInfo_Multi) {
        self.sum = ::std::option::Option::Some(ModeInfo_oneof_sum::multi(v))
    }

    // Mutable pointer to the field.
    pub fn mut_multi(&mut self) -> &mut ModeInfo_Multi {
        if let ::std::option::Option::Some(ModeInfo_oneof_sum::multi(_)) = self.sum {
        } else {
            self.sum = ::std::option::Option::Some(ModeInfo_oneof_sum::multi(ModeInfo_Multi::new()));
        }
        match self.sum {
            ::std::option::Option::Some(ModeInfo_oneof_sum::multi(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_multi(&mut self) -> ModeInfo_Multi {
        if self.has_multi() {
            match self.sum.take() {
                ::std::option::Option::Some(ModeInfo_oneof_sum::multi(v)) => v,
                _ => panic!(),
            }
        } else {
            ModeInfo_Multi::new()
        }
    }
}

impl ::protobuf::Message for ModeInfo {
    fn is_initialized(&self) -> bool {
        if let Some(ModeInfo_oneof_sum::single(ref v)) = self.sum {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ModeInfo_oneof_sum::multi(ref v)) = self.sum {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.sum = ::std::option::Option::Some(ModeInfo_oneof_sum::single(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.sum = ::std::option::Option::Some(ModeInfo_oneof_sum::multi(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.sum {
            match v {
                &ModeInfo_oneof_sum::single(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ModeInfo_oneof_sum::multi(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.sum {
            match v {
                &ModeInfo_oneof_sum::single(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ModeInfo_oneof_sum::multi(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ModeInfo {
        ModeInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ModeInfo_Single>(
                "single",
                ModeInfo::has_single,
                ModeInfo::get_single,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ModeInfo_Multi>(
                "multi",
                ModeInfo::has_multi,
                ModeInfo::get_multi,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ModeInfo>(
                "ModeInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ModeInfo {
        static instance: ::protobuf::rt::LazyV2<ModeInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ModeInfo::new)
    }
}

impl ::protobuf::Clear for ModeInfo {
    fn clear(&mut self) {
        self.sum = ::std::option::Option::None;
        self.sum = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ModeInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ModeInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ModeInfo_Single {
    // message fields
    pub mode: super::signing::SignMode,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ModeInfo_Single {
    fn default() -> &'a ModeInfo_Single {
        <ModeInfo_Single as ::protobuf::Message>::default_instance()
    }
}

impl ModeInfo_Single {
    pub fn new() -> ModeInfo_Single {
        ::std::default::Default::default()
    }

    // .cosmos.tx.signing.v1beta1.SignMode mode = 1;


    pub fn get_mode(&self) -> super::signing::SignMode {
        self.mode
    }
    pub fn clear_mode(&mut self) {
        self.mode = super::signing::SignMode::SIGN_MODE_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_mode(&mut self, v: super::signing::SignMode) {
        self.mode = v;
    }
}

impl ::protobuf::Message for ModeInfo_Single {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.mode, 1, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.mode != super::signing::SignMode::SIGN_MODE_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(1, self.mode);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.mode != super::signing::SignMode::SIGN_MODE_UNSPECIFIED {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.mode))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ModeInfo_Single {
        ModeInfo_Single::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::signing::SignMode>>(
                "mode",
                |m: &ModeInfo_Single| { &m.mode },
                |m: &mut ModeInfo_Single| { &mut m.mode },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ModeInfo_Single>(
                "ModeInfo.Single",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ModeInfo_Single {
        static instance: ::protobuf::rt::LazyV2<ModeInfo_Single> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ModeInfo_Single::new)
    }
}

impl ::protobuf::Clear for ModeInfo_Single {
    fn clear(&mut self) {
        self.mode = super::signing::SignMode::SIGN_MODE_UNSPECIFIED;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ModeInfo_Single {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ModeInfo_Single {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ModeInfo_Multi {
    // message fields
    pub bitarray: ::protobuf::SingularPtrField<super::multisig::CompactBitArray>,
    pub mode_infos: ::protobuf::RepeatedField<ModeInfo>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ModeInfo_Multi {
    fn default() -> &'a ModeInfo_Multi {
        <ModeInfo_Multi as ::protobuf::Message>::default_instance()
    }
}

impl ModeInfo_Multi {
    pub fn new() -> ModeInfo_Multi {
        ::std::default::Default::default()
    }

    // .cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1;


    pub fn get_bitarray(&self) -> &super::multisig::CompactBitArray {
        self.bitarray.as_ref().unwrap_or_else(|| <super::multisig::CompactBitArray as ::protobuf::Message>::default_instance())
    }
    pub fn clear_bitarray(&mut self) {
        self.bitarray.clear();
    }

    pub fn has_bitarray(&self) -> bool {
        self.bitarray.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bitarray(&mut self, v: super::multisig::CompactBitArray) {
        self.bitarray = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bitarray(&mut self) -> &mut super::multisig::CompactBitArray {
        if self.bitarray.is_none() {
            self.bitarray.set_default();
        }
        self.bitarray.as_mut().unwrap()
    }

    // Take field
    pub fn take_bitarray(&mut self) -> super::multisig::CompactBitArray {
        self.bitarray.take().unwrap_or_else(|| super::multisig::CompactBitArray::new())
    }

    // repeated .cosmos.tx.v1beta1.ModeInfo mode_infos = 2;


    pub fn get_mode_infos(&self) -> &[ModeInfo] {
        &self.mode_infos
    }
    pub fn clear_mode_infos(&mut self) {
        self.mode_infos.clear();
    }

    // Param is passed by value, moved
    pub fn set_mode_infos(&mut self, v: ::protobuf::RepeatedField<ModeInfo>) {
        self.mode_infos = v;
    }

    // Mutable pointer to the field.
    pub fn mut_mode_infos(&mut self) -> &mut ::protobuf::RepeatedField<ModeInfo> {
        &mut self.mode_infos
    }

    // Take field
    pub fn take_mode_infos(&mut self) -> ::protobuf::RepeatedField<ModeInfo> {
        ::std::mem::replace(&mut self.mode_infos, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ModeInfo_Multi {
    fn is_initialized(&self) -> bool {
        for v in &self.bitarray {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.mode_infos {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.bitarray)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.mode_infos)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.bitarray.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.mode_infos {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.bitarray.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.mode_infos {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ModeInfo_Multi {
        ModeInfo_Multi::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::multisig::CompactBitArray>>(
                "bitarray",
                |m: &ModeInfo_Multi| { &m.bitarray },
                |m: &mut ModeInfo_Multi| { &mut m.bitarray },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ModeInfo>>(
                "mode_infos",
                |m: &ModeInfo_Multi| { &m.mode_infos },
                |m: &mut ModeInfo_Multi| { &mut m.mode_infos },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ModeInfo_Multi>(
                "ModeInfo.Multi",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ModeInfo_Multi {
        static instance: ::protobuf::rt::LazyV2<ModeInfo_Multi> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ModeInfo_Multi::new)
    }
}

impl ::protobuf::Clear for ModeInfo_Multi {
    fn clear(&mut self) {
        self.bitarray.clear();
        self.mode_infos.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ModeInfo_Multi {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ModeInfo_Multi {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Fee {
    // message fields
    pub amount: ::protobuf::RepeatedField<super::coin::Coin>,
    pub gas_limit: u64,
    pub payer: ::std::string::String,
    pub granter: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Fee {
    fn default() -> &'a Fee {
        <Fee as ::protobuf::Message>::default_instance()
    }
}

impl Fee {
    pub fn new() -> Fee {
        ::std::default::Default::default()
    }

    // repeated .cosmos.base.v1beta1.Coin amount = 1;


    pub fn get_amount(&self) -> &[super::coin::Coin] {
        &self.amount
    }
    pub fn clear_amount(&mut self) {
        self.amount.clear();
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: ::protobuf::RepeatedField<super::coin::Coin>) {
        self.amount = v;
    }

    // Mutable pointer to the field.
    pub fn mut_amount(&mut self) -> &mut ::protobuf::RepeatedField<super::coin::Coin> {
        &mut self.amount
    }

    // Take field
    pub fn take_amount(&mut self) -> ::protobuf::RepeatedField<super::coin::Coin> {
        ::std::mem::replace(&mut self.amount, ::protobuf::RepeatedField::new())
    }

    // uint64 gas_limit = 2;


    pub fn get_gas_limit(&self) -> u64 {
        self.gas_limit
    }
    pub fn clear_gas_limit(&mut self) {
        self.gas_limit = 0;
    }

    // Param is passed by value, moved
    pub fn set_gas_limit(&mut self, v: u64) {
        self.gas_limit = v;
    }

    // string payer = 3;


    pub fn get_payer(&self) -> &str {
        &self.payer
    }
    pub fn clear_payer(&mut self) {
        self.payer.clear();
    }

    // Param is passed by value, moved
    pub fn set_payer(&mut self, v: ::std::string::String) {
        self.payer = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payer(&mut self) -> &mut ::std::string::String {
        &mut self.payer
    }

    // Take field
    pub fn take_payer(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.payer, ::std::string::String::new())
    }

    // string granter = 4;


    pub fn get_granter(&self) -> &str {
        &self.granter
    }
    pub fn clear_granter(&mut self) {
        self.granter.clear();
    }

    // Param is passed by value, moved
    pub fn set_granter(&mut self, v: ::std::string::String) {
        self.granter = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_granter(&mut self) -> &mut ::std::string::String {
        &mut self.granter
    }

    // Take field
    pub fn take_granter(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.granter, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Fee {
    fn is_initialized(&self) -> bool {
        for v in &self.amount {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.amount)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.gas_limit = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.payer)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.granter)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.amount {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.gas_limit != 0 {
            my_size += ::protobuf::rt::value_size(2, self.gas_limit, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.payer.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.payer);
        }
        if !self.granter.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.granter);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.amount {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.gas_limit != 0 {
            os.write_uint64(2, self.gas_limit)?;
        }
        if !self.payer.is_empty() {
            os.write_string(3, &self.payer)?;
        }
        if !self.granter.is_empty() {
            os.write_string(4, &self.granter)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Fee {
        Fee::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::coin::Coin>>(
                "amount",
                |m: &Fee| { &m.amount },
                |m: &mut Fee| { &mut m.amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "gas_limit",
                |m: &Fee| { &m.gas_limit },
                |m: &mut Fee| { &mut m.gas_limit },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "payer",
                |m: &Fee| { &m.payer },
                |m: &mut Fee| { &mut m.payer },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "granter",
                |m: &Fee| { &m.granter },
                |m: &mut Fee| { &mut m.granter },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Fee>(
                "Fee",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Fee {
        static instance: ::protobuf::rt::LazyV2<Fee> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Fee::new)
    }
}

impl ::protobuf::Clear for Fee {
    fn clear(&mut self) {
        self.amount.clear();
        self.gas_limit = 0;
        self.payer.clear();
        self.granter.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Fee {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Fee {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Tip {
    // message fields
    pub amount: ::protobuf::RepeatedField<super::coin::Coin>,
    pub tipper: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Tip {
    fn default() -> &'a Tip {
        <Tip as ::protobuf::Message>::default_instance()
    }
}

impl Tip {
    pub fn new() -> Tip {
        ::std::default::Default::default()
    }

    // repeated .cosmos.base.v1beta1.Coin amount = 1;


    pub fn get_amount(&self) -> &[super::coin::Coin] {
        &self.amount
    }
    pub fn clear_amount(&mut self) {
        self.amount.clear();
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: ::protobuf::RepeatedField<super::coin::Coin>) {
        self.amount = v;
    }

    // Mutable pointer to the field.
    pub fn mut_amount(&mut self) -> &mut ::protobuf::RepeatedField<super::coin::Coin> {
        &mut self.amount
    }

    // Take field
    pub fn take_amount(&mut self) -> ::protobuf::RepeatedField<super::coin::Coin> {
        ::std::mem::replace(&mut self.amount, ::protobuf::RepeatedField::new())
    }

    // string tipper = 2;


    pub fn get_tipper(&self) -> &str {
        &self.tipper
    }
    pub fn clear_tipper(&mut self) {
        self.tipper.clear();
    }

    // Param is passed by value, moved
    pub fn set_tipper(&mut self, v: ::std::string::String) {
        self.tipper = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tipper(&mut self) -> &mut ::std::string::String {
        &mut self.tipper
    }

    // Take field
    pub fn take_tipper(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.tipper, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Tip {
    fn is_initialized(&self) -> bool {
        for v in &self.amount {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.amount)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.tipper)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.amount {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.tipper.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.tipper);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.amount {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.tipper.is_empty() {
            os.write_string(2, &self.tipper)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Tip {
        Tip::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::coin::Coin>>(
                "amount",
                |m: &Tip| { &m.amount },
                |m: &mut Tip| { &mut m.amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "tipper",
                |m: &Tip| { &m.tipper },
                |m: &mut Tip| { &mut m.tipper },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Tip>(
                "Tip",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Tip {
        static instance: ::protobuf::rt::LazyV2<Tip> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Tip::new)
    }
}

impl ::protobuf::Clear for Tip {
    fn clear(&mut self) {
        self.amount.clear();
        self.tipper.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Tip {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Tip {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AuxSignerData {
    // message fields
    pub address: ::std::string::String,
    pub sign_doc: ::protobuf::SingularPtrField<SignDocDirectAux>,
    pub mode: super::signing::SignMode,
    pub sig: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AuxSignerData {
    fn default() -> &'a AuxSignerData {
        <AuxSignerData as ::protobuf::Message>::default_instance()
    }
}

impl AuxSignerData {
    pub fn new() -> AuxSignerData {
        ::std::default::Default::default()
    }

    // string address = 1;


    pub fn get_address(&self) -> &str {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.address, ::std::string::String::new())
    }

    // .cosmos.tx.v1beta1.SignDocDirectAux sign_doc = 2;


    pub fn get_sign_doc(&self) -> &SignDocDirectAux {
        self.sign_doc.as_ref().unwrap_or_else(|| <SignDocDirectAux as ::protobuf::Message>::default_instance())
    }
    pub fn clear_sign_doc(&mut self) {
        self.sign_doc.clear();
    }

    pub fn has_sign_doc(&self) -> bool {
        self.sign_doc.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sign_doc(&mut self, v: SignDocDirectAux) {
        self.sign_doc = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sign_doc(&mut self) -> &mut SignDocDirectAux {
        if self.sign_doc.is_none() {
            self.sign_doc.set_default();
        }
        self.sign_doc.as_mut().unwrap()
    }

    // Take field
    pub fn take_sign_doc(&mut self) -> SignDocDirectAux {
        self.sign_doc.take().unwrap_or_else(|| SignDocDirectAux::new())
    }

    // .cosmos.tx.signing.v1beta1.SignMode mode = 3;


    pub fn get_mode(&self) -> super::signing::SignMode {
        self.mode
    }
    pub fn clear_mode(&mut self) {
        self.mode = super::signing::SignMode::SIGN_MODE_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_mode(&mut self, v: super::signing::SignMode) {
        self.mode = v;
    }

    // bytes sig = 4;


    pub fn get_sig(&self) -> &[u8] {
        &self.sig
    }
    pub fn clear_sig(&mut self) {
        self.sig.clear();
    }

    // Param is passed by value, moved
    pub fn set_sig(&mut self, v: ::std::vec::Vec<u8>) {
        self.sig = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sig(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.sig
    }

    // Take field
    pub fn take_sig(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.sig, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for AuxSignerData {
    fn is_initialized(&self) -> bool {
        for v in &self.sign_doc {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.address)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.sign_doc)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.mode, 3, &mut self.unknown_fields)?
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.sig)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.address);
        }
        if let Some(ref v) = self.sign_doc.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.mode != super::signing::SignMode::SIGN_MODE_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(3, self.mode);
        }
        if !self.sig.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.sig);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.address.is_empty() {
            os.write_string(1, &self.address)?;
        }
        if let Some(ref v) = self.sign_doc.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.mode != super::signing::SignMode::SIGN_MODE_UNSPECIFIED {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.mode))?;
        }
        if !self.sig.is_empty() {
            os.write_bytes(4, &self.sig)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AuxSignerData {
        AuxSignerData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "address",
                |m: &AuxSignerData| { &m.address },
                |m: &mut AuxSignerData| { &mut m.address },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SignDocDirectAux>>(
                "sign_doc",
                |m: &AuxSignerData| { &m.sign_doc },
                |m: &mut AuxSignerData| { &mut m.sign_doc },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::signing::SignMode>>(
                "mode",
                |m: &AuxSignerData| { &m.mode },
                |m: &mut AuxSignerData| { &mut m.mode },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "sig",
                |m: &AuxSignerData| { &m.sig },
                |m: &mut AuxSignerData| { &mut m.sig },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AuxSignerData>(
                "AuxSignerData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AuxSignerData {
        static instance: ::protobuf::rt::LazyV2<AuxSignerData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AuxSignerData::new)
    }
}

impl ::protobuf::Clear for AuxSignerData {
    fn clear(&mut self) {
        self.address.clear();
        self.sign_doc.clear();
        self.mode = super::signing::SignMode::SIGN_MODE_UNSPECIFIED;
        self.sig.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AuxSignerData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AuxSignerData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1acosmos/tx/v1beta1/tx.proto\x12\x11cosmos.tx.v1beta1\x1a\x11amino/a\
    mino.proto\x1a\x14gogoproto/gogo.proto\x1a-cosmos/crypto/multisig/v1beta\
    1/multisig.proto\x1a\x1ecosmos/base/v1beta1/coin.proto\x1a'cosmos/tx/sig\
    ning/v1beta1/signing.proto\x1a\x19google/protobuf/any.proto\x1a\x19cosmo\
    s_proto/cosmos.proto\"\x8d\x01\n\x02Tx\x12-\n\x04body\x18\x01\x20\x01(\
    \x0b2\x19.cosmos.tx.v1beta1.TxBodyR\x04body\x128\n\tauth_info\x18\x02\
    \x20\x01(\x0b2\x1b.cosmos.tx.v1beta1.AuthInfoR\x08authInfo\x12\x1e\n\nsi\
    gnatures\x18\x03\x20\x03(\x0cR\nsignatures\"n\n\x05TxRaw\x12\x1d\n\nbody\
    _bytes\x18\x01\x20\x01(\x0cR\tbodyBytes\x12&\n\x0fauth_info_bytes\x18\
    \x02\x20\x01(\x0cR\rauthInfoBytes\x12\x1e\n\nsignatures\x18\x03\x20\x03(\
    \x0cR\nsignatures\"\x92\x01\n\x07SignDoc\x12\x1d\n\nbody_bytes\x18\x01\
    \x20\x01(\x0cR\tbodyBytes\x12&\n\x0fauth_info_bytes\x18\x02\x20\x01(\x0c\
    R\rauthInfoBytes\x12\x19\n\x08chain_id\x18\x03\x20\x01(\tR\x07chainId\
    \x12%\n\x0eaccount_number\x18\x04\x20\x01(\x04R\raccountNumber\"\xf2\x01\
    \n\x10SignDocDirectAux\x12\x1d\n\nbody_bytes\x18\x01\x20\x01(\x0cR\tbody\
    Bytes\x123\n\npublic_key\x18\x02\x20\x01(\x0b2\x14.google.protobuf.AnyR\
    \tpublicKey\x12\x19\n\x08chain_id\x18\x03\x20\x01(\tR\x07chainId\x12%\n\
    \x0eaccount_number\x18\x04\x20\x01(\x04R\raccountNumber\x12\x1a\n\x08seq\
    uence\x18\x05\x20\x01(\x04R\x08sequence\x12,\n\x03tip\x18\x06\x20\x01(\
    \x0b2\x16.cosmos.tx.v1beta1.TipR\x03tipB\x02\x18\x01\"\x95\x02\n\x06TxBo\
    dy\x120\n\x08messages\x18\x01\x20\x03(\x0b2\x14.google.protobuf.AnyR\x08\
    messages\x12\x12\n\x04memo\x18\x02\x20\x01(\tR\x04memo\x12%\n\x0etimeout\
    _height\x18\x03\x20\x01(\x04R\rtimeoutHeight\x12B\n\x11extension_options\
    \x18\xff\x07\x20\x03(\x0b2\x14.google.protobuf.AnyR\x10extensionOptions\
    \x12Z\n\x1enon_critical_extension_options\x18\xff\x0f\x20\x03(\x0b2\x14.\
    google.protobuf.AnyR\x1bnonCriticalExtensionOptions\"\xa4\x01\n\x08AuthI\
    nfo\x12@\n\x0csigner_infos\x18\x01\x20\x03(\x0b2\x1d.cosmos.tx.v1beta1.S\
    ignerInfoR\x0bsignerInfos\x12(\n\x03fee\x18\x02\x20\x01(\x0b2\x16.cosmos\
    .tx.v1beta1.FeeR\x03fee\x12,\n\x03tip\x18\x03\x20\x01(\x0b2\x16.cosmos.t\
    x.v1beta1.TipR\x03tipB\x02\x18\x01\"\x97\x01\n\nSignerInfo\x123\n\npubli\
    c_key\x18\x01\x20\x01(\x0b2\x14.google.protobuf.AnyR\tpublicKey\x128\n\t\
    mode_info\x18\x02\x20\x01(\x0b2\x1b.cosmos.tx.v1beta1.ModeInfoR\x08modeI\
    nfo\x12\x1a\n\x08sequence\x18\x03\x20\x01(\x04R\x08sequence\"\xe0\x02\n\
    \x08ModeInfo\x12<\n\x06single\x18\x01\x20\x01(\x0b2\".cosmos.tx.v1beta1.\
    ModeInfo.SingleH\0R\x06single\x129\n\x05multi\x18\x02\x20\x01(\x0b2!.cos\
    mos.tx.v1beta1.ModeInfo.MultiH\0R\x05multi\x1aA\n\x06Single\x127\n\x04mo\
    de\x18\x01\x20\x01(\x0e2#.cosmos.tx.signing.v1beta1.SignModeR\x04mode\
    \x1a\x90\x01\n\x05Multi\x12K\n\x08bitarray\x18\x01\x20\x01(\x0b2/.cosmos\
    .crypto.multisig.v1beta1.CompactBitArrayR\x08bitarray\x12:\n\nmode_infos\
    \x18\x02\x20\x03(\x0b2\x1b.cosmos.tx.v1beta1.ModeInfoR\tmodeInfosB\x05\n\
    \x03sum\"\x81\x02\n\x03Fee\x12y\n\x06amount\x18\x01\x20\x03(\x0b2\x19.co\
    smos.base.v1beta1.CoinR\x06amountBF\xc8\xde\x1f\0\xa8\xe7\xb0*\x01\xaa\
    \xdf\x1f(github.com/cosmos/cosmos-sdk/types.Coins\x9a\xe7\xb0*\x0clegacy\
    _coins\x12\x1b\n\tgas_limit\x18\x02\x20\x01(\x04R\x08gasLimit\x12.\n\x05\
    payer\x18\x03\x20\x01(\tR\x05payerB\x18\xd2\xb4-\x14cosmos.AddressString\
    \x122\n\x07granter\x18\x04\x20\x01(\tR\x07granterB\x18\xd2\xb4-\x14cosmo\
    s.AddressString\"\xb6\x01\n\x03Tip\x12y\n\x06amount\x18\x01\x20\x03(\x0b\
    2\x19.cosmos.base.v1beta1.CoinR\x06amountBF\xc8\xde\x1f\0\xa8\xe7\xb0*\
    \x01\xaa\xdf\x1f(github.com/cosmos/cosmos-sdk/types.Coins\x9a\xe7\xb0*\
    \x0clegacy_coins\x120\n\x06tipper\x18\x02\x20\x01(\tR\x06tipperB\x18\xd2\
    \xb4-\x14cosmos.AddressString:\x02\x18\x01\"\xce\x01\n\rAuxSignerData\
    \x122\n\x07address\x18\x01\x20\x01(\tR\x07addressB\x18\xd2\xb4-\x14cosmo\
    s.AddressString\x12>\n\x08sign_doc\x18\x02\x20\x01(\x0b2#.cosmos.tx.v1be\
    ta1.SignDocDirectAuxR\x07signDoc\x127\n\x04mode\x18\x03\x20\x01(\x0e2#.c\
    osmos.tx.signing.v1beta1.SignModeR\x04mode\x12\x10\n\x03sig\x18\x04\x20\
    \x01(\x0cR\x03sigB'Z%github.com/cosmos/cosmos-sdk/types/txb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
