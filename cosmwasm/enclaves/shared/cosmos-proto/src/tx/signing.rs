// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `cosmos/tx/signing/v1beta1/signing.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct SignatureDescriptors {
    // message fields
    pub signatures: ::protobuf::RepeatedField<SignatureDescriptor>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SignatureDescriptors {
    fn default() -> &'a SignatureDescriptors {
        <SignatureDescriptors as ::protobuf::Message>::default_instance()
    }
}

impl SignatureDescriptors {
    pub fn new() -> SignatureDescriptors {
        ::std::default::Default::default()
    }

    // repeated .cosmos.tx.signing.v1beta1.SignatureDescriptor signatures = 1;


    pub fn get_signatures(&self) -> &[SignatureDescriptor] {
        &self.signatures
    }
    pub fn clear_signatures(&mut self) {
        self.signatures.clear();
    }

    // Param is passed by value, moved
    pub fn set_signatures(&mut self, v: ::protobuf::RepeatedField<SignatureDescriptor>) {
        self.signatures = v;
    }

    // Mutable pointer to the field.
    pub fn mut_signatures(&mut self) -> &mut ::protobuf::RepeatedField<SignatureDescriptor> {
        &mut self.signatures
    }

    // Take field
    pub fn take_signatures(&mut self) -> ::protobuf::RepeatedField<SignatureDescriptor> {
        ::std::mem::replace(&mut self.signatures, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for SignatureDescriptors {
    fn is_initialized(&self) -> bool {
        for v in &self.signatures {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.signatures)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.signatures {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.signatures {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SignatureDescriptors {
        SignatureDescriptors::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SignatureDescriptor>>(
                "signatures",
                |m: &SignatureDescriptors| { &m.signatures },
                |m: &mut SignatureDescriptors| { &mut m.signatures },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SignatureDescriptors>(
                "SignatureDescriptors",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SignatureDescriptors {
        static instance: ::protobuf::rt::LazyV2<SignatureDescriptors> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SignatureDescriptors::new)
    }
}

impl ::protobuf::Clear for SignatureDescriptors {
    fn clear(&mut self) {
        self.signatures.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SignatureDescriptors {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SignatureDescriptors {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SignatureDescriptor {
    // message fields
    pub public_key: ::protobuf::SingularPtrField<::protobuf::well_known_types::Any>,
    pub data: ::protobuf::SingularPtrField<SignatureDescriptor_Data>,
    pub sequence: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SignatureDescriptor {
    fn default() -> &'a SignatureDescriptor {
        <SignatureDescriptor as ::protobuf::Message>::default_instance()
    }
}

impl SignatureDescriptor {
    pub fn new() -> SignatureDescriptor {
        ::std::default::Default::default()
    }

    // .google.protobuf.Any public_key = 1;


    pub fn get_public_key(&self) -> &::protobuf::well_known_types::Any {
        self.public_key.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Any as ::protobuf::Message>::default_instance())
    }
    pub fn clear_public_key(&mut self) {
        self.public_key.clear();
    }

    pub fn has_public_key(&self) -> bool {
        self.public_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_public_key(&mut self, v: ::protobuf::well_known_types::Any) {
        self.public_key = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_public_key(&mut self) -> &mut ::protobuf::well_known_types::Any {
        if self.public_key.is_none() {
            self.public_key.set_default();
        }
        self.public_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_public_key(&mut self) -> ::protobuf::well_known_types::Any {
        self.public_key.take().unwrap_or_else(|| ::protobuf::well_known_types::Any::new())
    }

    // .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data data = 2;


    pub fn get_data(&self) -> &SignatureDescriptor_Data {
        self.data.as_ref().unwrap_or_else(|| <SignatureDescriptor_Data as ::protobuf::Message>::default_instance())
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    pub fn has_data(&self) -> bool {
        self.data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: SignatureDescriptor_Data) {
        self.data = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut SignatureDescriptor_Data {
        if self.data.is_none() {
            self.data.set_default();
        }
        self.data.as_mut().unwrap()
    }

    // Take field
    pub fn take_data(&mut self) -> SignatureDescriptor_Data {
        self.data.take().unwrap_or_else(|| SignatureDescriptor_Data::new())
    }

    // uint64 sequence = 3;


    pub fn get_sequence(&self) -> u64 {
        self.sequence
    }
    pub fn clear_sequence(&mut self) {
        self.sequence = 0;
    }

    // Param is passed by value, moved
    pub fn set_sequence(&mut self, v: u64) {
        self.sequence = v;
    }
}

impl ::protobuf::Message for SignatureDescriptor {
    fn is_initialized(&self) -> bool {
        for v in &self.public_key {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.data {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.public_key)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.data)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.sequence = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.public_key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.sequence != 0 {
            my_size += ::protobuf::rt::value_size(3, self.sequence, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.public_key.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.data.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.sequence != 0 {
            os.write_uint64(3, self.sequence)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SignatureDescriptor {
        SignatureDescriptor::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Any>>(
                "public_key",
                |m: &SignatureDescriptor| { &m.public_key },
                |m: &mut SignatureDescriptor| { &mut m.public_key },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SignatureDescriptor_Data>>(
                "data",
                |m: &SignatureDescriptor| { &m.data },
                |m: &mut SignatureDescriptor| { &mut m.data },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "sequence",
                |m: &SignatureDescriptor| { &m.sequence },
                |m: &mut SignatureDescriptor| { &mut m.sequence },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SignatureDescriptor>(
                "SignatureDescriptor",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SignatureDescriptor {
        static instance: ::protobuf::rt::LazyV2<SignatureDescriptor> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SignatureDescriptor::new)
    }
}

impl ::protobuf::Clear for SignatureDescriptor {
    fn clear(&mut self) {
        self.public_key.clear();
        self.data.clear();
        self.sequence = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SignatureDescriptor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SignatureDescriptor {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SignatureDescriptor_Data {
    // message oneof groups
    pub sum: ::std::option::Option<SignatureDescriptor_Data_oneof_sum>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SignatureDescriptor_Data {
    fn default() -> &'a SignatureDescriptor_Data {
        <SignatureDescriptor_Data as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum SignatureDescriptor_Data_oneof_sum {
    single(SignatureDescriptor_Data_Single),
    multi(SignatureDescriptor_Data_Multi),
}

impl SignatureDescriptor_Data {
    pub fn new() -> SignatureDescriptor_Data {
        ::std::default::Default::default()
    }

    // .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single single = 1;


    pub fn get_single(&self) -> &SignatureDescriptor_Data_Single {
        match self.sum {
            ::std::option::Option::Some(SignatureDescriptor_Data_oneof_sum::single(ref v)) => v,
            _ => <SignatureDescriptor_Data_Single as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_single(&mut self) {
        self.sum = ::std::option::Option::None;
    }

    pub fn has_single(&self) -> bool {
        match self.sum {
            ::std::option::Option::Some(SignatureDescriptor_Data_oneof_sum::single(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_single(&mut self, v: SignatureDescriptor_Data_Single) {
        self.sum = ::std::option::Option::Some(SignatureDescriptor_Data_oneof_sum::single(v))
    }

    // Mutable pointer to the field.
    pub fn mut_single(&mut self) -> &mut SignatureDescriptor_Data_Single {
        if let ::std::option::Option::Some(SignatureDescriptor_Data_oneof_sum::single(_)) = self.sum {
        } else {
            self.sum = ::std::option::Option::Some(SignatureDescriptor_Data_oneof_sum::single(SignatureDescriptor_Data_Single::new()));
        }
        match self.sum {
            ::std::option::Option::Some(SignatureDescriptor_Data_oneof_sum::single(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_single(&mut self) -> SignatureDescriptor_Data_Single {
        if self.has_single() {
            match self.sum.take() {
                ::std::option::Option::Some(SignatureDescriptor_Data_oneof_sum::single(v)) => v,
                _ => panic!(),
            }
        } else {
            SignatureDescriptor_Data_Single::new()
        }
    }

    // .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi multi = 2;


    pub fn get_multi(&self) -> &SignatureDescriptor_Data_Multi {
        match self.sum {
            ::std::option::Option::Some(SignatureDescriptor_Data_oneof_sum::multi(ref v)) => v,
            _ => <SignatureDescriptor_Data_Multi as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_multi(&mut self) {
        self.sum = ::std::option::Option::None;
    }

    pub fn has_multi(&self) -> bool {
        match self.sum {
            ::std::option::Option::Some(SignatureDescriptor_Data_oneof_sum::multi(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_multi(&mut self, v: SignatureDescriptor_Data_Multi) {
        self.sum = ::std::option::Option::Some(SignatureDescriptor_Data_oneof_sum::multi(v))
    }

    // Mutable pointer to the field.
    pub fn mut_multi(&mut self) -> &mut SignatureDescriptor_Data_Multi {
        if let ::std::option::Option::Some(SignatureDescriptor_Data_oneof_sum::multi(_)) = self.sum {
        } else {
            self.sum = ::std::option::Option::Some(SignatureDescriptor_Data_oneof_sum::multi(SignatureDescriptor_Data_Multi::new()));
        }
        match self.sum {
            ::std::option::Option::Some(SignatureDescriptor_Data_oneof_sum::multi(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_multi(&mut self) -> SignatureDescriptor_Data_Multi {
        if self.has_multi() {
            match self.sum.take() {
                ::std::option::Option::Some(SignatureDescriptor_Data_oneof_sum::multi(v)) => v,
                _ => panic!(),
            }
        } else {
            SignatureDescriptor_Data_Multi::new()
        }
    }
}

impl ::protobuf::Message for SignatureDescriptor_Data {
    fn is_initialized(&self) -> bool {
        if let Some(SignatureDescriptor_Data_oneof_sum::single(ref v)) = self.sum {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(SignatureDescriptor_Data_oneof_sum::multi(ref v)) = self.sum {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.sum = ::std::option::Option::Some(SignatureDescriptor_Data_oneof_sum::single(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.sum = ::std::option::Option::Some(SignatureDescriptor_Data_oneof_sum::multi(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.sum {
            match v {
                &SignatureDescriptor_Data_oneof_sum::single(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &SignatureDescriptor_Data_oneof_sum::multi(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.sum {
            match v {
                &SignatureDescriptor_Data_oneof_sum::single(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &SignatureDescriptor_Data_oneof_sum::multi(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SignatureDescriptor_Data {
        SignatureDescriptor_Data::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, SignatureDescriptor_Data_Single>(
                "single",
                SignatureDescriptor_Data::has_single,
                SignatureDescriptor_Data::get_single,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, SignatureDescriptor_Data_Multi>(
                "multi",
                SignatureDescriptor_Data::has_multi,
                SignatureDescriptor_Data::get_multi,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SignatureDescriptor_Data>(
                "SignatureDescriptor.Data",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SignatureDescriptor_Data {
        static instance: ::protobuf::rt::LazyV2<SignatureDescriptor_Data> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SignatureDescriptor_Data::new)
    }
}

impl ::protobuf::Clear for SignatureDescriptor_Data {
    fn clear(&mut self) {
        self.sum = ::std::option::Option::None;
        self.sum = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SignatureDescriptor_Data {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SignatureDescriptor_Data {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SignatureDescriptor_Data_Single {
    // message fields
    pub mode: SignMode,
    pub signature: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SignatureDescriptor_Data_Single {
    fn default() -> &'a SignatureDescriptor_Data_Single {
        <SignatureDescriptor_Data_Single as ::protobuf::Message>::default_instance()
    }
}

impl SignatureDescriptor_Data_Single {
    pub fn new() -> SignatureDescriptor_Data_Single {
        ::std::default::Default::default()
    }

    // .cosmos.tx.signing.v1beta1.SignMode mode = 1;


    pub fn get_mode(&self) -> SignMode {
        self.mode
    }
    pub fn clear_mode(&mut self) {
        self.mode = SignMode::SIGN_MODE_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_mode(&mut self, v: SignMode) {
        self.mode = v;
    }

    // bytes signature = 2;


    pub fn get_signature(&self) -> &[u8] {
        &self.signature
    }
    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.signature
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.signature, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for SignatureDescriptor_Data_Single {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.mode, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.signature)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.mode != SignMode::SIGN_MODE_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(1, self.mode);
        }
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.signature);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.mode != SignMode::SIGN_MODE_UNSPECIFIED {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.mode))?;
        }
        if !self.signature.is_empty() {
            os.write_bytes(2, &self.signature)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SignatureDescriptor_Data_Single {
        SignatureDescriptor_Data_Single::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<SignMode>>(
                "mode",
                |m: &SignatureDescriptor_Data_Single| { &m.mode },
                |m: &mut SignatureDescriptor_Data_Single| { &mut m.mode },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "signature",
                |m: &SignatureDescriptor_Data_Single| { &m.signature },
                |m: &mut SignatureDescriptor_Data_Single| { &mut m.signature },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SignatureDescriptor_Data_Single>(
                "SignatureDescriptor.Data.Single",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SignatureDescriptor_Data_Single {
        static instance: ::protobuf::rt::LazyV2<SignatureDescriptor_Data_Single> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SignatureDescriptor_Data_Single::new)
    }
}

impl ::protobuf::Clear for SignatureDescriptor_Data_Single {
    fn clear(&mut self) {
        self.mode = SignMode::SIGN_MODE_UNSPECIFIED;
        self.signature.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SignatureDescriptor_Data_Single {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SignatureDescriptor_Data_Single {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SignatureDescriptor_Data_Multi {
    // message fields
    pub bitarray: ::protobuf::SingularPtrField<super::multisig::CompactBitArray>,
    pub signatures: ::protobuf::RepeatedField<SignatureDescriptor_Data>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SignatureDescriptor_Data_Multi {
    fn default() -> &'a SignatureDescriptor_Data_Multi {
        <SignatureDescriptor_Data_Multi as ::protobuf::Message>::default_instance()
    }
}

impl SignatureDescriptor_Data_Multi {
    pub fn new() -> SignatureDescriptor_Data_Multi {
        ::std::default::Default::default()
    }

    // .cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1;


    pub fn get_bitarray(&self) -> &super::multisig::CompactBitArray {
        self.bitarray.as_ref().unwrap_or_else(|| <super::multisig::CompactBitArray as ::protobuf::Message>::default_instance())
    }
    pub fn clear_bitarray(&mut self) {
        self.bitarray.clear();
    }

    pub fn has_bitarray(&self) -> bool {
        self.bitarray.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bitarray(&mut self, v: super::multisig::CompactBitArray) {
        self.bitarray = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bitarray(&mut self) -> &mut super::multisig::CompactBitArray {
        if self.bitarray.is_none() {
            self.bitarray.set_default();
        }
        self.bitarray.as_mut().unwrap()
    }

    // Take field
    pub fn take_bitarray(&mut self) -> super::multisig::CompactBitArray {
        self.bitarray.take().unwrap_or_else(|| super::multisig::CompactBitArray::new())
    }

    // repeated .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data signatures = 2;


    pub fn get_signatures(&self) -> &[SignatureDescriptor_Data] {
        &self.signatures
    }
    pub fn clear_signatures(&mut self) {
        self.signatures.clear();
    }

    // Param is passed by value, moved
    pub fn set_signatures(&mut self, v: ::protobuf::RepeatedField<SignatureDescriptor_Data>) {
        self.signatures = v;
    }

    // Mutable pointer to the field.
    pub fn mut_signatures(&mut self) -> &mut ::protobuf::RepeatedField<SignatureDescriptor_Data> {
        &mut self.signatures
    }

    // Take field
    pub fn take_signatures(&mut self) -> ::protobuf::RepeatedField<SignatureDescriptor_Data> {
        ::std::mem::replace(&mut self.signatures, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for SignatureDescriptor_Data_Multi {
    fn is_initialized(&self) -> bool {
        for v in &self.bitarray {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.signatures {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.bitarray)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.signatures)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.bitarray.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.signatures {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.bitarray.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.signatures {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SignatureDescriptor_Data_Multi {
        SignatureDescriptor_Data_Multi::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::multisig::CompactBitArray>>(
                "bitarray",
                |m: &SignatureDescriptor_Data_Multi| { &m.bitarray },
                |m: &mut SignatureDescriptor_Data_Multi| { &mut m.bitarray },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SignatureDescriptor_Data>>(
                "signatures",
                |m: &SignatureDescriptor_Data_Multi| { &m.signatures },
                |m: &mut SignatureDescriptor_Data_Multi| { &mut m.signatures },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SignatureDescriptor_Data_Multi>(
                "SignatureDescriptor.Data.Multi",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SignatureDescriptor_Data_Multi {
        static instance: ::protobuf::rt::LazyV2<SignatureDescriptor_Data_Multi> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SignatureDescriptor_Data_Multi::new)
    }
}

impl ::protobuf::Clear for SignatureDescriptor_Data_Multi {
    fn clear(&mut self) {
        self.bitarray.clear();
        self.signatures.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SignatureDescriptor_Data_Multi {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SignatureDescriptor_Data_Multi {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum SignMode {
    SIGN_MODE_UNSPECIFIED = 0,
    SIGN_MODE_DIRECT = 1,
    SIGN_MODE_TEXTUAL = 2,
    SIGN_MODE_DIRECT_AUX = 3,
    SIGN_MODE_LEGACY_AMINO_JSON = 127,
    SIGN_MODE_EIP_191 = 191,
}

impl ::protobuf::ProtobufEnum for SignMode {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<SignMode> {
        match value {
            0 => ::std::option::Option::Some(SignMode::SIGN_MODE_UNSPECIFIED),
            1 => ::std::option::Option::Some(SignMode::SIGN_MODE_DIRECT),
            2 => ::std::option::Option::Some(SignMode::SIGN_MODE_TEXTUAL),
            3 => ::std::option::Option::Some(SignMode::SIGN_MODE_DIRECT_AUX),
            127 => ::std::option::Option::Some(SignMode::SIGN_MODE_LEGACY_AMINO_JSON),
            191 => ::std::option::Option::Some(SignMode::SIGN_MODE_EIP_191),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [SignMode] = &[
            SignMode::SIGN_MODE_UNSPECIFIED,
            SignMode::SIGN_MODE_DIRECT,
            SignMode::SIGN_MODE_TEXTUAL,
            SignMode::SIGN_MODE_DIRECT_AUX,
            SignMode::SIGN_MODE_LEGACY_AMINO_JSON,
            SignMode::SIGN_MODE_EIP_191,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<SignMode>("SignMode", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for SignMode {
}

impl ::std::default::Default for SignMode {
    fn default() -> Self {
        SignMode::SIGN_MODE_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for SignMode {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n'cosmos/tx/signing/v1beta1/signing.proto\x12\x19cosmos.tx.signing.v1be\
    ta1\x1a-cosmos/crypto/multisig/v1beta1/multisig.proto\x1a\x19google/prot\
    obuf/any.proto\"f\n\x14SignatureDescriptors\x12N\n\nsignatures\x18\x01\
    \x20\x03(\x0b2..cosmos.tx.signing.v1beta1.SignatureDescriptorR\nsignatur\
    es\"\xf5\x04\n\x13SignatureDescriptor\x123\n\npublic_key\x18\x01\x20\x01\
    (\x0b2\x14.google.protobuf.AnyR\tpublicKey\x12G\n\x04data\x18\x02\x20\
    \x01(\x0b23.cosmos.tx.signing.v1beta1.SignatureDescriptor.DataR\x04data\
    \x12\x1a\n\x08sequence\x18\x03\x20\x01(\x04R\x08sequence\x1a\xc3\x03\n\
    \x04Data\x12T\n\x06single\x18\x01\x20\x01(\x0b2:.cosmos.tx.signing.v1bet\
    a1.SignatureDescriptor.Data.SingleH\0R\x06single\x12Q\n\x05multi\x18\x02\
    \x20\x01(\x0b29.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi\
    H\0R\x05multi\x1a_\n\x06Single\x127\n\x04mode\x18\x01\x20\x01(\x0e2#.cos\
    mos.tx.signing.v1beta1.SignModeR\x04mode\x12\x1c\n\tsignature\x18\x02\
    \x20\x01(\x0cR\tsignature\x1a\xa9\x01\n\x05Multi\x12K\n\x08bitarray\x18\
    \x01\x20\x01(\x0b2/.cosmos.crypto.multisig.v1beta1.CompactBitArrayR\x08b\
    itarray\x12S\n\nsignatures\x18\x02\x20\x03(\x0b23.cosmos.tx.signing.v1be\
    ta1.SignatureDescriptor.DataR\nsignaturesB\x05\n\x03sum*\xa5\x01\n\x08Si\
    gnMode\x12\x19\n\x15SIGN_MODE_UNSPECIFIED\x10\0\x12\x14\n\x10SIGN_MODE_D\
    IRECT\x10\x01\x12\x15\n\x11SIGN_MODE_TEXTUAL\x10\x02\x12\x18\n\x14SIGN_M\
    ODE_DIRECT_AUX\x10\x03\x12\x1f\n\x1bSIGN_MODE_LEGACY_AMINO_JSON\x10\x7f\
    \x12\x16\n\x11SIGN_MODE_EIP_191\x10\xbf\x01B/Z-github.com/cosmos/cosmos-\
    sdk/types/tx/signingb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
