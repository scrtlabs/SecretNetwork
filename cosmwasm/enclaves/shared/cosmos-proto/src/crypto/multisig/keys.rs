// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `cosmos/crypto/multisig/keys.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct LegacyAminoPubKey {
    // message fields
    pub threshold: u32,
    pub public_keys: ::protobuf::RepeatedField<::protobuf::well_known_types::Any>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LegacyAminoPubKey {
    fn default() -> &'a LegacyAminoPubKey {
        <LegacyAminoPubKey as ::protobuf::Message>::default_instance()
    }
}

impl LegacyAminoPubKey {
    pub fn new() -> LegacyAminoPubKey {
        ::std::default::Default::default()
    }

    // uint32 threshold = 1;


    pub fn get_threshold(&self) -> u32 {
        self.threshold
    }
    pub fn clear_threshold(&mut self) {
        self.threshold = 0;
    }

    // Param is passed by value, moved
    pub fn set_threshold(&mut self, v: u32) {
        self.threshold = v;
    }

    // repeated .google.protobuf.Any public_keys = 2;


    pub fn get_public_keys(&self) -> &[::protobuf::well_known_types::Any] {
        &self.public_keys
    }
    pub fn clear_public_keys(&mut self) {
        self.public_keys.clear();
    }

    // Param is passed by value, moved
    pub fn set_public_keys(&mut self, v: ::protobuf::RepeatedField<::protobuf::well_known_types::Any>) {
        self.public_keys = v;
    }

    // Mutable pointer to the field.
    pub fn mut_public_keys(&mut self) -> &mut ::protobuf::RepeatedField<::protobuf::well_known_types::Any> {
        &mut self.public_keys
    }

    // Take field
    pub fn take_public_keys(&mut self) -> ::protobuf::RepeatedField<::protobuf::well_known_types::Any> {
        ::std::mem::replace(&mut self.public_keys, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for LegacyAminoPubKey {
    fn is_initialized(&self) -> bool {
        for v in &self.public_keys {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.threshold = tmp;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.public_keys)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.threshold != 0 {
            my_size += ::protobuf::rt::value_size(1, self.threshold, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.public_keys {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.threshold != 0 {
            os.write_uint32(1, self.threshold)?;
        }
        for v in &self.public_keys {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LegacyAminoPubKey {
        LegacyAminoPubKey::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "threshold",
                |m: &LegacyAminoPubKey| { &m.threshold },
                |m: &mut LegacyAminoPubKey| { &mut m.threshold },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Any>>(
                "public_keys",
                |m: &LegacyAminoPubKey| { &m.public_keys },
                |m: &mut LegacyAminoPubKey| { &mut m.public_keys },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LegacyAminoPubKey>(
                "LegacyAminoPubKey",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LegacyAminoPubKey {
        static instance: ::protobuf::rt::LazyV2<LegacyAminoPubKey> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LegacyAminoPubKey::new)
    }
}

impl ::protobuf::Clear for LegacyAminoPubKey {
    fn clear(&mut self) {
        self.threshold = 0;
        self.public_keys.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LegacyAminoPubKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LegacyAminoPubKey {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n!cosmos/crypto/multisig/keys.proto\x12\x16cosmos.crypto.multisig\x1a\
    \x14gogoproto/gogo.proto\x1a\x19google/protobuf/any.proto\x1a\x11amino/a\
    mino.proto\"\xc3\x01\n\x11LegacyAminoPubKey\x12\x1c\n\tthreshold\x18\x01\
    \x20\x01(\rR\tthreshold\x12N\n\x0bpublic_keys\x18\x02\x20\x03(\x0b2\x14.\
    google.protobuf.AnyR\npublicKeysB\x17\xe2\xde\x1f\x07PubKeys\xa2\xe7\xb0\
    *\x07pubkeys:@\x88\xa0\x1f\0\x8a\xe7\xb0*\"tendermint/PubKeyMultisigThre\
    shold\x92\xe7\xb0*\x10threshold_stringB3Z1github.com/cosmos/cosmos-sdk/c\
    rypto/keys/multisigb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
