enclave {
    from "sgx_tstd.edl" import *;
    from "sgx_stdio.edl" import *;
    from "sgx_fs.edl" import *;
    from "sgx_net.edl" import *;
    from "sgx_time.edl" import *;
    include "sgx_quote.h"
    from "sgx_backtrace.edl" import *;
    from "sgx_tstdc.edl" import *;
    from "sgx_tprotected_fs.edl" import *;

    from "sgx_env.edl" import u_getenv_ocall, u_setenv_ocall;

    // This header is generated during the build of enclave-ffi-types
    include "enclave-ffi-types.h"

    trusted {
        EnclaveBuffer ecall_allocate(
            [in, count=length] const uint8_t* buffer,
            uintptr_t length
        );

        public sgx_status_t ecall_init_bootstrap(
            [out, count=32] uint8_t* public_key,
            [in, count=spid_len] const uint8_t* spid,
            uint32_t spid_len,
            [in, count=api_key_len] const uint8_t* api_key,
            uint32_t api_key_len
        );

        public sgx_status_t ecall_key_gen(
            [out, count=32] uint8_t* public_key
        );

        public sgx_status_t ecall_get_attestation_report(
            [in, count=api_key_len] const uint8_t* api_key,
            uint32_t api_key_len,
            uint8_t dry_run
        );

        public NodeAuthResult ecall_authenticate_new_node(
            [in, count=cert_len] const uint8_t* cert,
            uintptr_t cert_len,
            [out, count=96] uint8_t* seed
        );

        public sgx_status_t ecall_init_node(
            [in, count=master_key_len] const uint8_t* master_key,
            uintptr_t master_key_len,
            [in, count=encrypted_seed_len] const uint8_t* encrypted_seed,
            uintptr_t encrypted_seed_len,
            [in, count=api_key_len] const uint8_t* api_key,
            uint32_t api_key_len
        );

        public sgx_status_t ecall_configure_runtime(
            RuntimeConfiguration runtime_configuration
        );

        public InitResult ecall_init(
            Ctx context,
            uint64_t gas_limit,
            [out] uint64_t* used_gas,
            [in, count=contract_len] const uint8_t* contract,
            uintptr_t contract_len,
            [in, count=env_len] const uint8_t* env,
            uintptr_t env_len,
            [in, count=msg_len] const uint8_t* msg,
            uintptr_t msg_len,
            [in, count=sig_info_len] const uint8_t* sig_info,
            uintptr_t sig_info_len
        );

        public HandleResult ecall_handle(
            Ctx context,
            uint64_t gas_limit,
            [out] uint64_t* used_gas,
            [in, count=contract_len] const uint8_t* contract,
            uintptr_t contract_len,
            [in, count=env_len] const uint8_t* env,
            uintptr_t env_len,
            [in, count=msg_len] const uint8_t* msg,
            uintptr_t msg_len,
            [in, count=sig_info_len] const uint8_t* sig_info,
            uintptr_t sig_info_len,
            uint8_t handle_type
        );

        public QueryResult ecall_query(
            Ctx context,
            uint64_t gas_limit,
            [out] uint64_t* used_gas,
            [in, count=contract_len] const uint8_t* contract,
            uintptr_t contract_len,
            [in, count=env_len] const uint8_t* env,
            uintptr_t env_len,
            [in, count=msg_len] const uint8_t* msg,
            uintptr_t msg_len
        );

        public HealthCheckResult ecall_health_check();

        public uint32_t ecall_run_tests();
    };

    untrusted {
        UserSpaceBuffer ocall_allocate(
            [in, count=length] const uint8_t* buffer,
            uintptr_t length
        );

        OcallReturn ocall_read_db(
            Ctx context,
            [out] UntrustedVmError* vm_error,
            [out] uint64_t* gas_used,
            [out] EnclaveBuffer* value,
            [in, count=key_len] const uint8_t* key,
            uintptr_t key_len
        ) allow (ecall_allocate);

        OcallReturn ocall_query_chain(
            Ctx context,
            [out] UntrustedVmError* vm_error,
            [out] uint64_t* gas_used,
            uint64_t gas_limit,
            [out] EnclaveBuffer* value,
            [in, count=query_len] const uint8_t* query,
            uintptr_t query_len,
            uint32_t query_depth
        ) allow (ecall_allocate, ecall_query);

        OcallReturn ocall_remove_db(
            Ctx context,
            [out] UntrustedVmError* vm_error,
            [out] uint64_t* gas_used,
            [in, count=key_len] const uint8_t* key,
            uintptr_t key_len
        );

        OcallReturn ocall_multiple_write_db(
            Ctx context,
            [out] UntrustedVmError* vm_error,
            [out] uint64_t* gas_used,
            [in, count=keys_len] const uint8_t* keys,
            uintptr_t keys_len
        );

        OcallReturn ocall_write_db(
            Ctx context,
            [out] UntrustedVmError* vm_error,
            [out] uint64_t* gas_used,
            [in, count=key_len] const uint8_t* key,
            uintptr_t key_len,
            [in, count=value_len] const uint8_t* value,
            uintptr_t value_len
        );

        sgx_status_t ocall_sgx_init_quote(
            [out] sgx_target_info_t *ret_ti,
            [out] sgx_epid_group_id_t *ret_gid
        );

        sgx_status_t ocall_get_ias_socket([out] int *ret_fd);
        sgx_status_t ocall_get_sn_tss_socket([out] int *ret_fd);

        sgx_status_t ocall_get_quote(
            [in, size=sigrl_len] uint8_t * p_sigrl,
            uint32_t sigrl_len,
            [in] sgx_report_t *report,
            sgx_quote_sign_type_t quote_type,
            [in] sgx_spid_t *p_spid,
            [in] sgx_quote_nonce_t *p_nonce,
            [out] sgx_report_t *p_qe_report,
            [out, size=maxlen] sgx_quote_t *p_quote,
            uint32_t maxlen,
            [out] uint32_t* p_quote_len
        );

        sgx_status_t ocall_get_update_info(
            [in] sgx_platform_info_t * platformBlob,
            int32_t enclaveTrusted,
            [out] sgx_update_info_bit_t * update_info
        );
    };
};
