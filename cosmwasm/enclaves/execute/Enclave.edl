enclave {
    from "sgx_tstd.edl" import *;
    from "sgx_stdio.edl" import *;
    from "sgx_fs.edl" import *;
    from "sgx_net.edl" import *;
    from "sgx_time.edl" import *;
    include "sgx_quote.h"
    include "sgx_ql_quote.h"
    include "sgx_qve_header.h"
    from "sgx_backtrace.edl" import *;
    from "sgx_tstdc.edl" import *;
    from "sgx_tprotected_fs.edl" import *;

    from "sgx_env.edl" import u_getenv_ocall, u_setenv_ocall;

    // This header is generated during the build of enclave-ffi-types
    include "enclave-ffi-types.h"

    trusted {
        EnclaveBuffer ecall_allocate(
            [in, count=length] const uint8_t* buffer,
            uintptr_t length
        );

        public sgx_status_t ecall_init_bootstrap(
            [out, count=32] uint8_t* public_key,
            [in, count=spid_len] const uint8_t* spid,
            uint32_t spid_len,
            [in, count=api_key_len] const uint8_t* api_key,
            uint32_t api_key_len
        );

        public sgx_status_t ecall_key_gen(
            [out, count=32] uint8_t* public_key
        );

        // migration opcodes:
        //  0 - convert sealed files from 2.17
        //  1 - create migration report
        //  2 - export sealing kdk for the next enclave
        //  3 - migrate the sealed unified file from the previous enclave
        public sgx_status_t ecall_migration_op(
            uint32_t opcode
        );

        public sgx_status_t ecall_rotate_store(
            [in, out, count=kv_len] uint8_t* kv_p,
            uint32_t kv_len
        );

        public sgx_status_t ecall_onchain_approve_upgrade(
            [in, count=msg_len] const uint8_t* msg,
            uint32_t msg_len
        );

        public sgx_status_t ecall_get_attestation_report(
            [in, count=api_key_len] const uint8_t* api_key,
            uint32_t api_key_len,
            uint32_t flags
        );

        public NodeAuthResult ecall_authenticate_new_node(
            [in, count=cert_len] const uint8_t* cert,
            uintptr_t cert_len,
            [out, count=n_seeds] uint8_t* p_seeds,
            uintptr_t n_seeds,
            [out] uintptr_t* p_seeds_size
        );

        public NodeAuthResult ecall_check_patch_level(
            [in, count=api_key_len] const uint8_t* api_key,
            uint32_t api_key_len
        );

        public sgx_status_t ecall_get_network_pubkey(
            uint32_t i_seed,
            [out, count=32] uint8_t* p_node,
            [out, count=32] uint8_t* p_io,
            [out] uint32_t* p_seeds
        );

        public sgx_status_t ecall_get_genesis_seed(
            [in, count=pk_len] const uint8_t* pk,
            uintptr_t pk_len,
            [out, count=48] uint8_t* seed
        );

        public sgx_status_t ecall_init_node(
            [in, count=master_key_len] const uint8_t* master_key,
            uintptr_t master_key_len,
            [in, count=encrypted_seed_len] const uint8_t* encrypted_seed,
            uintptr_t encrypted_seed_len,
            [in, count=api_key_len] const uint8_t* api_key,
            uint32_t api_key_len
        );

        public sgx_status_t ecall_configure_runtime(
            RuntimeConfiguration runtime_configuration
        );

        public InitResult ecall_init(
            Ctx context,
            uint64_t gas_limit,
            [out] uint64_t* used_gas,
            [in, count=contract_len] const uint8_t* contract,
            uintptr_t contract_len,
            [in, count=env_len] const uint8_t* env,
            uintptr_t env_len,
            [in, count=msg_len] const uint8_t* msg,
            uintptr_t msg_len,
            [in, count=sig_info_len] const uint8_t* sig_info,
            uintptr_t sig_info_len,
            [in, count=admin_len] const uint8_t* admin,
            uintptr_t admin_len
        );

        public HandleResult ecall_handle(
            Ctx context,
            uint64_t gas_limit,
            [out] uint64_t* used_gas,
            [in, count=contract_len] const uint8_t* contract,
            uintptr_t contract_len,
            [in, count=env_len] const uint8_t* env,
            uintptr_t env_len,
            [in, count=msg_len] const uint8_t* msg,
            uintptr_t msg_len,
            [in, count=sig_info_len] const uint8_t* sig_info,
            uintptr_t sig_info_len,
            uint8_t handle_type
        );

        public QueryResult ecall_query(
            Ctx context,
            uint64_t gas_limit,
            [out] uint64_t* used_gas,
            [in, count=contract_len] const uint8_t* contract,
            uintptr_t contract_len,
            [in, count=env_len] const uint8_t* env,
            uintptr_t env_len,
            [in, count=msg_len] const uint8_t* msg,
            uintptr_t msg_len
        );

        public MigrateResult ecall_migrate(
            Ctx context,
            uint64_t gas_limit,
            [out] uint64_t* used_gas,
            [in, count=contract_len] const uint8_t* contract,
            uintptr_t contract_len,
            [in, count=env_len] const uint8_t* env,
            uintptr_t env_len,
            [in, count=msg_len] const uint8_t* msg,
            uintptr_t msg_len,
            [in, count=sig_info_len] const uint8_t* sig_info,
            uintptr_t sig_info_len,
            [in, count=admin_len] const uint8_t* admin,
            uintptr_t admin_len,
            [in, count=admin_proof_len] const uint8_t* admin_proof,
            uintptr_t admin_proof_len
        );

        public UpdateAdminResult ecall_update_admin(
            [in, count=env_len] const uint8_t* env,
            uintptr_t env_len,
            [in, count=sig_info_len] const uint8_t* sig_info,
            uintptr_t sig_info_len,
            [in, count=current_admin_len] const uint8_t* current_admin,
            uintptr_t current_admin_len,
            [in, count=current_admin_proof_len] const uint8_t* current_admin_proof,
            uintptr_t current_admin_proof_len,
            [in, count=new_admin_len] const uint8_t* new_admin,
            uintptr_t new_admin_len
        );

        public HealthCheckResult ecall_health_check();

        public uint32_t ecall_run_tests();

        public sgx_status_t ecall_generate_random(
              [in, count=block_hash_len] const uint8_t* block_hash,
              uint32_t block_hash_len,
              uint64_t height,
              [out, count=48] uint8_t* random,
              [out, count=32] uint8_t* proof
        );
        public sgx_status_t ecall_submit_validator_set(
            [in, count=val_set_len] const uint8_t* val_set,
            uint32_t val_set_len,
            uint64_t height
        );

        public sgx_status_t ecall_submit_validator_set_evidence(
            [in, count=32] const uint8_t* val_set_evidence
        );

        public sgx_status_t ecall_validate_random(
            [in, count=random_len] const uint8_t* random,
            uint32_t random_len,
            [in, count=proof_len] const uint8_t* proof,
            uint32_t proof_len,
            [in, count=block_hash_len] const uint8_t* block_hash,
            uint32_t block_hash_len,
            uint64_t height
        );

        public sgx_status_t ecall_submit_block_signatures(
            [in, count=in_header_len] const uint8_t* in_header,
            uintptr_t in_header_len,
            [in, count=in_commit_len] const uint8_t* in_commit,
            uintptr_t in_commit_len,
            [in, count=in_txs_len] const uint8_t* in_txs,
            uintptr_t in_txs_len,
            [in, count=in_encrypted_random_len] const uint8_t* in_encrypted_random,
            uintptr_t in_encrypted_random_len,
            [out, count=32] uint8_t* decrypted,
            [out, count=32] uint8_t* next_validator_set_evidence,
            [in, count=in_cron_msgs_len] const uint8_t* in_cron_msgs,
            uintptr_t in_cron_msgs_len
        );
    };

    untrusted {
        UserSpaceBuffer ocall_allocate(
            [in, count=length] const uint8_t* buffer,
            uintptr_t length
        );

        OcallReturn ocall_read_db(
            Ctx context,
            [out] UntrustedVmError* vm_error,
            [out] uint64_t* gas_used,
            [out] EnclaveBuffer* value,
            [in, count=key_len] const uint8_t* key,
            uintptr_t key_len
        ) allow (ecall_allocate);

        OcallReturn ocall_query_chain(
            Ctx context,
            [out] UntrustedVmError* vm_error,
            [out] uint64_t* gas_used,
            uint64_t gas_limit,
            [out] EnclaveBuffer* value,
            [in, count=query_len] const uint8_t* query,
            uintptr_t query_len,
            uint32_t query_depth
        ) allow (ecall_allocate, ecall_query);

        OcallReturn ocall_remove_db(
            Ctx context,
            [out] UntrustedVmError* vm_error,
            [out] uint64_t* gas_used,
            [in, count=key_len] const uint8_t* key,
            uintptr_t key_len
        );

        OcallReturn ocall_multiple_write_db(
            Ctx context,
            [out] UntrustedVmError* vm_error,
            [out] uint64_t* gas_used,
            [in, count=keys_len] const uint8_t* keys,
            uintptr_t keys_len
        );

        OcallReturn ocall_write_db(
            Ctx context,
            [out] UntrustedVmError* vm_error,
            [out] uint64_t* gas_used,
            [in, count=key_len] const uint8_t* key,
            uintptr_t key_len,
            [in, count=value_len] const uint8_t* value,
            uintptr_t value_len
        );

        sgx_status_t ocall_sgx_init_quote(
            [out] sgx_target_info_t *ret_ti,
            [out] sgx_epid_group_id_t *ret_gid
        );

        sgx_status_t ocall_get_ias_socket([out] int *ret_fd);
        sgx_status_t ocall_get_sn_tss_socket([out] int *ret_fd);

        sgx_status_t ocall_get_quote(
            [in, size=sigrl_len] uint8_t * p_sigrl,
            uint32_t sigrl_len,
            [in] sgx_report_t *report,
            sgx_quote_sign_type_t quote_type,
            [in] sgx_spid_t *p_spid,
            [in] sgx_quote_nonce_t *p_nonce,
            [out] sgx_report_t *p_qe_report,
            [out, size=maxlen] sgx_quote_t *p_quote,
            uint32_t maxlen,
            [out] uint32_t* p_quote_len
        );

        sgx_status_t ocall_get_quote_ecdsa_params(
            [out] sgx_target_info_t* p_qe_info,
            [out] uint32_t* p_quote_size
        );

        sgx_status_t ocall_get_quote_ecdsa(
            [in] const sgx_report_t* p_report,
            [out, size=n_quote] uint8_t* p_quote,
            uint32_t n_quote
        );

        sgx_status_t ocall_get_quote_ecdsa_collateral(
            [in, size=n_quote] const uint8_t* p_quote,
            uint32_t n_quote,
            [out, size=n_col] uint8_t* p_col,
            uint32_t n_col,
            [out] uint32_t* p_col_out
        );

        sgx_status_t ocall_verify_quote_ecdsa(
            [in, size=n_quote] const uint8_t* p_quote,
            uint32_t n_quote,
            [in, size=n_col] const uint8_t* p_col,
            uint32_t n_col,
            [in] const sgx_target_info_t* p_target_info,
            int64_t time_s,
            [out] sgx_ql_qe_report_info_t* p_qve_report_info,
            [out, size=n_supp_data] uint8_t* p_supp_data,
            uint32_t n_supp_data,
            [out] uint32_t* p_supp_data_size,
            [out] int64_t* p_time_s,
            [out] uint32_t* p_collateral_expiration_status,
            [out] sgx_ql_qv_result_t* p_qv_result
        );

        sgx_status_t ocall_get_update_info(
            [in] sgx_platform_info_t * platformBlob,
            int32_t enclaveTrusted,
            [out] sgx_update_info_bit_t * update_info
        );
    };
};
